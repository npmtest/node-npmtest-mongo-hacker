{"/home/travis/build/npmtest/node-npmtest-mongo-hacker/test.js":"/* istanbul instrument in package npmtest_mongo_hacker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/lib.npmtest_mongo_hacker.js":"/* istanbul instrument in package npmtest_mongo_hacker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongo_hacker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongo_hacker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongo-hacker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongo_hacker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongo_hacker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongo_hacker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongo_hacker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongo_hacker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongo_hacker.__dirname + '/lib.npmtest_mongo_hacker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/base.js":"if (_isWindows() && mongo_hacker_config['windows_warning']) {\n    print(\"\\nMongoDB Shell Enhancements for Hackers does not support color highlighting in \");\n    print(\"the default Windows Command Prompt. If you are using an alternative console \");\n    print(\"such as ConEmu (https://github.com/Maximus5/ConEmu) you may wish to try enabling\");\n    print(\"highlighting in your mongo_hacker config by setting:\");\n    print(\"\\n\\tforce_color: true\\n\");\n    print(\"You can hide this startup warning by setting:\");\n    print(\"\\n\\twindows_warning: false\\n\");\n}\n\nif (typeof db !== 'undefined') {\n    var current_version = parseFloat(db.serverBuildInfo().version).toFixed(2)\n\n    if (current_version < 2.4) {\n        print(\"Sorry! MongoDB Shell Enhancements for Hackers is only compatible with Mongo 2.4+\\n\");\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/config.js":"/*\n *\n * Mongo-Hacker\n * MongoDB Shell Enhancements for Hackers\n *\n * Tyler J. Brock - 2013 - 2016\n *\n * http://tylerbrock.github.com/mongo-hacker\n *\n */\n\nmongo_hacker_config = {\n  verbose_shell:  true,             // additional verbosity\n  index_paranoia: false,            // querytime explain\n  enhance_api:    true,             // additonal api extensions\n  indent:         2,                // number of spaces for indent\n  sort_keys:      false,            // sort the keys in documents when displayed\n  uuid_type:      'default',        // 'java', 'c#', 'python' or 'default'\n  banner_message: 'Mongo-Hacker ',  // banner message\n  version:        '0.0.14',         // current mongo-hacker version\n  show_banner:     true,            // show mongo-hacker version banner on startup\n  windows_warning: true,            // show warning banner for windows\n  force_color:     false,           // force color highlighting for Windows users\n  count_deltas:    false,           // \"count documents\" shows deltas with previous counts\n  column_separator:  '→',           // separator used when printing padded/aligned columns\n  value_separator:   '/',           // separator used when merging padded/aligned values\n  dbref: {\n    extended_info: true,            // enable more informations on DBRef\n    plain:         false,           // print DBRef as plain JSON object\n    db_if_differs: false            // include $db only if is different than current one\n  },\n\n  // Shell Color Settings\n  // Colors available: red, green, yellow, blue, magenta, cyan\n  colors: {\n    'key':       { color: 'gray' },\n    'number':    { color: 'red' },\n    'boolean':   { color: 'blue', bright: true },\n    'null':      { color: 'red', bright: true },\n    'undefined': { color: 'magenta', bright: true },\n    'objectid':  { color: 'yellow', underline: true },\n    'string':    { color: 'green' },\n    'binData':   { color: 'green', bright: true },\n    'function':  { color: 'magenta' },\n    'date':      { color: 'blue' },\n    'uuid':      { color: 'cyan' },\n    'databaseNames':   { color: 'green', bright: true },\n    'collectionNames': { color: 'blue',  bright: true }\n  }\n}\n\nif (mongo_hacker_config['show_banner']) {\n  print(mongo_hacker_config['banner_message'] + mongo_hacker_config['version']);\n}\n\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/mongo_hacker.js":"/*\n *\n * Mongo-Hacker\n * MongoDB Shell Enhancements for Hackers\n *\n * Tyler J. Brock - 2013 - 2016\n *\n * http://tylerbrock.github.com/mongo-hacker\n *\n */\n\nmongo_hacker_config = {\n  verbose_shell:  true,             // additional verbosity\n  index_paranoia: false,            // querytime explain\n  enhance_api:    true,             // additonal api extensions\n  indent:         2,                // number of spaces for indent\n  sort_keys:      false,            // sort the keys in documents when displayed\n  uuid_type:      'default',        // 'java', 'c#', 'python' or 'default'\n  banner_message: 'Mongo-Hacker ',  // banner message\n  version:        '0.0.14',         // current mongo-hacker version\n  show_banner:     true,            // show mongo-hacker version banner on startup\n  windows_warning: true,            // show warning banner for windows\n  force_color:     false,           // force color highlighting for Windows users\n  count_deltas:    false,           // \"count documents\" shows deltas with previous counts\n  column_separator:  '→',           // separator used when printing padded/aligned columns\n  value_separator:   '/',           // separator used when merging padded/aligned values\n  dbref: {\n    extended_info: true,            // enable more informations on DBRef\n    plain:         false,           // print DBRef as plain JSON object\n    db_if_differs: false            // include $db only if is different than current one\n  },\n\n  // Shell Color Settings\n  // Colors available: red, green, yellow, blue, magenta, cyan\n  colors: {\n    'key':       { color: 'gray' },\n    'number':    { color: 'red' },\n    'boolean':   { color: 'blue', bright: true },\n    'null':      { color: 'red', bright: true },\n    'undefined': { color: 'magenta', bright: true },\n    'objectid':  { color: 'yellow', underline: true },\n    'string':    { color: 'green' },\n    'binData':   { color: 'green', bright: true },\n    'function':  { color: 'magenta' },\n    'date':      { color: 'blue' },\n    'uuid':      { color: 'cyan' },\n    'databaseNames':   { color: 'green', bright: true },\n    'collectionNames': { color: 'blue',  bright: true }\n  }\n}\n\nif (mongo_hacker_config['show_banner']) {\n  print(mongo_hacker_config['banner_message'] + mongo_hacker_config['version']);\n}\n\nif (_isWindows() && mongo_hacker_config['windows_warning']) {\n    print(\"\\nMongoDB Shell Enhancements for Hackers does not support color highlighting in \");\n    print(\"the default Windows Command Prompt. If you are using an alternative console \");\n    print(\"such as ConEmu (https://github.com/Maximus5/ConEmu) you may wish to try enabling\");\n    print(\"highlighting in your mongo_hacker config by setting:\");\n    print(\"\\n\\tforce_color: true\\n\");\n    print(\"You can hide this startup warning by setting:\");\n    print(\"\\n\\twindows_warning: false\\n\");\n}\n\nif (typeof db !== 'undefined') {\n    var current_version = parseFloat(db.serverBuildInfo().version).toFixed(2)\n\n    if (current_version < 2.4) {\n        print(\"Sorry! MongoDB Shell Enhancements for Hackers is only compatible with Mongo 2.4+\\n\");\n    }\n}\n//----------------------------------------------------------------------------\n// Aggregation API Extensions\n//----------------------------------------------------------------------------\n\n// Inject aggregation extension while supporting base API\nDBCollection.prototype.aggregate = function( ops, extraOpts ){\n    if (hasDollar(ops) || (ops instanceof Array && hasDollar(ops[0]))){\n        var arr = ops;\n\n        if (!ops.length) {\n            arr = [];\n            for (var i=0; i<arguments.length; i++) {\n                arr.push(arguments[i]);\n            }\n        }\n\n        if (extraOpts === undefined) {\n            extraOpts = {};\n        }\n\n        var cmd = {pipeline: arr};\n        Object.extend(cmd, extraOpts);\n\n        var res = this.runCommand(\"aggregate\", cmd);\n        if (!res.ok) {\n            printStackTrace();\n            throw \"aggregate failed: \" + tojson(res);\n        }\n        return res;\n    } else {\n        return new Aggregation( this ).match( ops || {} );\n    }\n};\n\n// Helper method for determining if parameter has dollar signs\nfunction hasDollar(fields){\n    for (k in fields){\n        if(k.indexOf('$') !== -1){\n            return true;\n        };\n    };\n    return false;\n}\n\n//----------------------------------------------------------------------------\n// Aggregation Object\n//----------------------------------------------------------------------------\nAggregation = function( collection, fields ){\n    this._collection = collection;\n    this._pipeline = [];\n    this._options = {};\n    this._shellBatchSize = 20;\n};\n\nAggregation.prototype.has_next = function() {\n    return (this._index < this._results.length);\n};\n\nAggregation.prototype.next = function() {\n    var next = this._results[this._index];\n    this._index += 1;\n    return next\n};\n\nAggregation.prototype.execute = function() {\n    // build the command\n    var aggregation = { pipeline: this._pipeline };\n    if ( this._readPreference ) {\n        aggregation[\"$readPreference\"] = this.readPreference;\n    }\n    Object.extend(aggregation, this._options);\n\n    // run the command\n    var res = this._collection.runCommand(\n        \"aggregate\", aggregation\n    );\n\n    // check result\n    if ( ! res.ok ) {\n        printStackTrace();\n        throw \"aggregation failed: \" + tojson(res);\n    }\n\n    // setup results as pseudo cursor\n    this._index = 0;\n\n    if (this._options[\"explain\"] === true) {\n        this._results = res.stages\n    } else {\n        this._results = res.result;\n    }\n\n    return this._results;\n};\n\nAggregation.prototype.shellPrint = function() {\n    if (this._results == undefined) {\n        this.execute();\n    }\n    try {\n        var i = 0;\n        while (this.has_next() && i < this._shellBatchSize) {\n            var result = this.next();\n            printjson( result );\n            i++;\n        }\n        if ( this.has_next() ) {\n            print ( \"Type \\\"it\\\" for more\" );\n            ___it___ = this;\n        }\n        else {\n            ___it___ = null;\n        }\n    }\n    catch ( e ) {\n        print( e );\n    }\n};\n\nAggregation.prototype.project = function( fields ) {\n    if ( ! fields ) {\n        throw \"project needs fields\";\n    }\n    this._pipeline.push({ \"$project\": fields });\n    return this;\n};\n\nAggregation.prototype.find = function( criteria ) {\n    if ( ! criteria ) {\n        throw \"match needs a query object\";\n    }\n    this._pipeline.push({ \"$match\": criteria });\n    return this;\n};\n\nAggregation.prototype.match = function( criteria ) {\n    if ( ! criteria ) {\n        throw \"match needs a query object\";\n    }\n    this._pipeline.push({ \"$match\": criteria });\n    return this;\n};\n\nAggregation.prototype.limit = function( limit ) {\n    if ( ! limit ) {\n        throw \"limit needs an integer indicating the limit\";\n    }\n    this._pipeline.push({ \"$limit\": limit });\n    return this;\n};\n\nAggregation.prototype.skip = function( skip ) {\n    if ( ! skip ) {\n        throw \"skip needs an integer indicating the number to skip\";\n    }\n    this._pipeline.push({ \"$skip\": skip });\n    return this;\n};\n\nAggregation.prototype.unwind = function( field ) {\n    if ( ! field ) {\n        throw \"unwind needs the key of an array field to unwind\";\n    }\n    this._pipeline.push({ \"$unwind\": \"$\" + field });\n    return this;\n};\n\nAggregation.prototype.group = function( group_expression ) {\n    if ( ! group_expression ) {\n        throw \"group needs an group expression\";\n    }\n    this._pipeline.push({ \"$group\": group_expression });\n    return this;\n};\n\nAggregation.prototype.sort = function( sort ) {\n    if ( ! sort ) {\n        throw \"sort needs a sort document\";\n    }\n    this._pipeline.push({ \"$sort\": sort });\n    return this;\n};\n\nAggregation.prototype.geoNear = function( options ) {\n    if ( ! options ) {\n        throw \"geo near requires options\"\n    }\n    this._pipeline.push({ \"$geoNear\": options });\n    return this;\n};\n\nAggregation.prototype.readPreference = function( mode ) {\n    this._readPreference = mode;\n    return this;\n};\n\nAggregation.prototype.explain = function( ) {\n    this._options['explain'] = true;\n    return this;\n};\n//----------------------------------------------------------------------------\n// API Additions\n//----------------------------------------------------------------------------\nDBQuery.prototype.fields = function( fields ) {\n    this._fields = fields;\n    return this;\n};\n\nDBQuery.prototype.select = function( fields ){\n    this._fields = fields;\n    return this;\n};\n\nDBQuery.prototype.one = function(){\n    return this.limit(1)[0];\n};\n\nDBQuery.prototype.first = function(field){\n    var field = field || \"$natural\";\n    var sortBy = {};\n    sortBy[field] = 1;\n    return this.sort(sortBy).one();\n}\n\nDBQuery.prototype.reverse = function( field ){\n    var field = field || \"$natural\";\n    var sortBy = {};\n    sortBy[field] = -1;\n    return this.sort(sortBy);\n}\n\nDBQuery.prototype.last = function( field ){\n    var field = field || \"$natural\";\n    return this.reverse(field).one();\n}\n\nDB.prototype.rename = function(newName) {\n    if(newName == this.getName() || newName.length === 0)\n        return;\n\n    this.copyDatabase(this.getName(), newName, \"localhost\");\n    this.dropDatabase();\n    db = this.getSiblingDB(newName);\n};\n\nDB.prototype.indexStats = function(collectionFilter, details){\n\n    details = details || false;\n\n    collectionNames = db.getCollectionNames().filter(function (collectionName) {\n        // exclude \"system\" collections from \"count\" operation\n\n        if (!collectionFilter) {\n            return !collectionName.startsWith('system.');\n        }\n\n        if (collectionName == collectionFilter) {\n            return !collectionName.startsWith('system.');\n        }\n    });\n    documentIndexes = collectionNames.map(function (collectionName) {\n        var count = db.getCollection(collectionName).count();\n        return (count.commify() + \" document(s)\");\n    });\n\n    columnSeparator = mongo_hacker_config['column_separator'];\n\n    assert(collectionNames.length == documentIndexes.length);\n\n    maxKeyLength   = maxLength(collectionNames);\n    maxValueLength = maxLength(documentIndexes);\n\n    for (i = 0; i < collectionNames.length; i++) {\n        print(\n            colorize(collectionNames[i].pad(maxKeyLength, true), mongo_hacker_config['colors']['collectionNames'])\n            + \" \" + columnSeparator + \" \"\n            + documentIndexes[i].pad(maxValueLength)\n        );\n\n        var stats = db.getCollection(collectionNames[i]).stats();\n        var totalIndexSize = (Math.round((stats.totalIndexSize / 1024 / 1024) * 10) / 10) + \" MB\";\n\n        var indexNames = [];\n        var indexSizes = [];\n        for (indexName in stats.indexSizes) {\n            indexSizes.push((Math.round((stats.indexSizes[indexName] / 1024 / 1024) * 10) / 10) + \" MB\");\n            indexNames.push(\"  \" + indexName);\n        }\n\n        maxIndexKeyLength   = maxLength(indexNames);\n        maxIndexValueLength = maxLength(indexSizes);\n\n        print(\n            colorize(\"totalIndexSize\".pad(maxKeyLength, true), mongo_hacker_config['colors']['string'])\n            + \" \" + columnSeparator + \" \"\n            + colorize(totalIndexSize.pad(maxValueLength), mongo_hacker_config['colors']['number'])\n        );\n\n        if (details) {\n            for (var j = 0; j < indexSizes.length; j++) {\n                print(\n                    colorize(\"\" + indexNames[j].pad(maxIndexKeyLength, true), mongo_hacker_config['colors']['string'])\n                    + \" \" + columnSeparator + \" \"\n                    + colorize(indexSizes[j].pad(maxIndexValueLength), mongo_hacker_config['colors']['binData'])\n                );\n            };\n        }\n    }\n\n    return \"\";\n}\n\nMongo.prototype.getDatabaseNames = function() {\n    // this API addition gives us the following convenience function:\n    //\n    //   db.getMongo().getDatabaseNames()\n    //\n    // which is similar in use to:\n    //\n    //   db.getCollectionNames()\n    //\n    // mongo-hacker FTW :-)\n    return this.getDBs().databases.reduce(function(names, db) {\n        return names.concat(db.name);\n    }, []);\n}\n\n//----------------------------------------------------------------------------\n// API Modifications (additions and changes)\n//----------------------------------------------------------------------------\n\n// Add upsert method which has upsert set as true and multi as false\nDBQuery.prototype.upsert = function( upsert ){\n    assert( upsert , \"need an upsert object\" );\n\n    this._validate(upsert);\n    this._db._initExtraInfo();\n    this._mongo.update( this._ns , this._query , upsert , true , false );\n    this._db._getExtraInfo(\"Upserted\");\n};\n\n// Updates are always multi and never an upsert\nDBQuery.prototype.update = function( update ){\n    assert( update , \"need an update object\" );\n\n    this._checkMulti();\n    this._validate(update);\n    this._db._initExtraInfo();\n    this._mongo.update( this._ns , this._query , update , false , true );\n    this._db._getExtraInfo(\"Updated\");\n};\n\n// Replace one document\nDBQuery.prototype.replace = function( replacement ){\n    assert( replacement , \"need an update object\" );\n\n    this._validate(replacement);\n    this._db._initExtraInfo();\n    this._mongo.update( this._ns , this._query , replacement , false , false );\n    this._db._getExtraInfo(\"Replaced\");\n};\n\n// Remove is always multi\nDBQuery.prototype.remove = function(){\n    for ( var k in this._query ){\n        if ( k == \"_id\" && typeof( this._query[k] ) == \"undefined\" ){\n            throw \"can't have _id set to undefined in a remove expression\";\n        }\n    }\n\n    this._checkMulti();\n    this._db._initExtraInfo();\n    this._mongo.remove( this._ns , this._query , false );\n    this._db._getExtraInfo(\"Removed\");\n};\n\n//----------------------------------------------------------------------------\n// Full Text Search\n//----------------------------------------------------------------------------\nDBQuery.prototype.textSearch = function( search ) {\n    var text = {\n        text: this._collection.getName(),\n        search: search,\n        filter: this._query,\n        project: this._fields,\n        limit: this._limit\n    }\n\n    var result = this._db.runCommand( text );\n    return result.results;\n};\nfunction listDbs(){\n  return db.adminCommand(\"listDatabases\").databases.map(function(d){return d.name});\n}\n\nthis.__proto__.constructor.autocomplete = listDbs;shellHelper.find = function (query) {\n    assert(typeof query == \"string\");\n\n    var args = query.split( /\\s+/ );\n    query = args[0];\n    args = args.splice(1);\n\n    if (query !== \"\") {\n        var regexp = new RegExp(query, \"i\");\n        var result = db.runCommand(\"listCommands\");\n        for (var command in result.commands) {\n            var commandObj = result.commands[command];\n            var help = commandObj.help;\n            if (commandObj.help.indexOf('\\n') != -1 ) {\n                help = commandObj.help.substring(0, commandObj.help.lastIndexOf('\\n'));\n            }\n            if (regexp.test(command) || regexp.test(help)) {\n                var numSpaces = 30 - command.length;\n                print(colorize(command, {color: 'green'}), Array(numSpaces).join(\" \"), \"-\", help);\n            }\n        }\n    }\n};\n\n//----------------------------------------------------------------------------\n// Color Functions\n//----------------------------------------------------------------------------\n__ansi = {\n    csi: String.fromCharCode(0x1B) + '[',\n    reset:      '0',\n    text_prop:  'm',\n    foreground: '3',\n    bright:     '1',\n    underline:  '4',\n\n    colors: {\n        black:   '0',\n        red:     '1',\n        green:   '2',\n        yellow:  '3',\n        blue:    '4',\n        magenta: '5',\n        cyan:    '6',\n        gray:    '7',\n    }\n};\n\nfunction controlCode( parameters ) {\n    if ( parameters === undefined ) {\n        parameters = \"\";\n    }\n    else if (typeof(parameters) == 'object' && (parameters instanceof Array)) {\n        parameters = parameters.join(';');\n    }\n\n    return __ansi.csi + String(parameters) + String(__ansi.text_prop);\n};\n\nfunction applyColorCode( string, properties, nocolor ) {\n    // Allow global __colorize default to be overriden\n    var applyColor = (null == nocolor) ? __colorize : !nocolor;\n\n    return applyColor ? controlCode(properties) + String(string) + controlCode() : String(string);\n};\n\nfunction colorize( string, color, nocolor ) {\n\n    var params = [];\n    var code = __ansi.foreground + __ansi.colors[color.color];\n\n    params.push(code);\n\n    if ( color.bright === true ) params.push(__ansi.bright);\n    if ( color.underline === true ) params.push(__ansi.underline);\n\n    return applyColorCode( string, params, nocolor );\n};\n\nfunction colorizeAll( strings, color, nocolor ) {\n    return strings.map(function(string) {\n        return colorize( string, color, nocolor );\n    });\n};\n__indent = Array(mongo_hacker_config.indent + 1).join(' ');\n__colorize = (_isWindows() && !mongo_hacker_config['force_color']) ? false : true;\n\nObjectId.prototype.toString = function() {\n    return this.str;\n};\n\nObjectId.prototype.tojson = function(indent, nolint) {\n    return tojson(this);\n};\n\nvar dateToJson = Date.prototype.tojson;\n\nDate.prototype.tojson = function(indent, nolint, nocolor) {\n  var isoDateString = dateToJson.call(this);\n  var dateString = isoDateString.substring(8, isoDateString.length-1);\n\n  var isodate = colorize(dateString, mongo_hacker_config.colors.date, nocolor);\n  return 'ISODate(' + isodate + ')';\n};\n\nArray.tojson = function( a , indent , nolint, nocolor ){\n    var lineEnding = nolint ? \" \" : \"\\n\";\n\n    if (!indent)\n        indent = \"\";\n\n    if ( nolint )\n        indent = \"\";\n\n    if (a.length === 0) {\n        return \"[ ]\";\n    }\n\n    var s = \"[\" + lineEnding;\n    indent += __indent;\n    for ( var i=0; i<a.length; i++){\n        s += indent + tojson( a[i], indent , nolint, nocolor );\n        if ( i < a.length - 1 ){\n            s += \",\" + lineEnding;\n        }\n    }\n    if ( a.length === 0 ) {\n        s += indent;\n    }\n\n    indent = indent.substring(__indent.length);\n    s += lineEnding+indent+\"]\";\n    return s;\n};\n\nfunction surround(name, inside) {\n    return [name, '(', inside, ')'].join('');\n}\n\nNumber.prototype.commify = function() {\n    // http://stackoverflow.com/questions/2901102\n    return this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nNumberLong.prototype.tojson = function(indent, nolint, nocolor) {\n    var color = mongo_hacker_config.colors.number;\n    var output = colorize('\"' + this.toString().match(/-?\\d+/)[0] + '\"', color, nocolor);\n    return surround('NumberLong', output);\n};\n\nNumberInt.prototype.tojson = function(indent, nolint, nocolor) {\n    var color = mongo_hacker_config.colors.number;\n    var output = colorize('\"' + this.toString().match(/-?\\d+/)[0] + '\"', color, nocolor);\n    return surround('NumberInt', output);\n};\n\nBinData.prototype.tojson = function(indent , nolint, nocolor) {\n    var uuidType = mongo_hacker_config.uuid_type;\n    var uuidColor = mongo_hacker_config.colors.uuid;\n    var binDataColor = mongo_hacker_config.colors.binData;\n\n    if (this.subtype() === 3) {\n        var output = colorize('\"' + uuidToString(this) + '\"', uuidColor, nocolor) + ', '\n        output += colorize('\"' + uuidType + '\"', uuidColor)\n        return surround('UUID', output);\n    } else if (this.subtype() === 4) {\n        var output = colorize('\"' + uuidToString(this, \"default\") + '\"', uuidColor, nocolor) + ')'\n        return surround('UUID', output);\n    } else {\n        var output = colorize(this.subtype(), {color: 'red'}) + ', '\n        output += colorize('\"' + this.base64() + '\"', binDataColor, nocolor)\n        return surround('BinData', output);\n    }\n};\n\nDBQuery.prototype.shellPrint = function(){\n    try {\n        var start = new Date().getTime();\n        var n = 0;\n        while ( this.hasNext() && n < DBQuery.shellBatchSize ){\n            var s = this._prettyShell ? tojson( this.next() ) : tojson( this.next() , \"\" , true );\n            print( s );\n            n++;\n        }\n\n        var output = [];\n\n        if (typeof _verboseShell !== 'undefined' && _verboseShell) {\n            var time = new Date().getTime() - start;\n            var slowms = getSlowms();\n            var fetched = \"Fetched \" + n + \" record(s) in \";\n            if (time > slowms) {\n                fetched += colorize(time + \"ms\", { color: \"red\", bright: true });\n            } else {\n                fetched += colorize(time + \"ms\", { color: \"green\", bright: true });\n            }\n            output.push(fetched);\n        }\n\n        var paranoia = mongo_hacker_config.index_paranoia;\n\n        if (typeof paranoia !== 'undefined' && paranoia) {\n            var explain = this.clone();\n            explain._ensureSpecial();\n            explain._query.$explain = true;\n            explain._limit = Math.abs(n) * -1;\n            var result = explain.next();\n\n            if (current_version < 3) {\n                var type = result.cursor;\n\n                if (type !== undefined) {\n                    var index_use = \"Index[\";\n                    if (type == \"BasicCursor\") {\n                        index_use += colorize( \"none\", { color: \"red\", bright: true });\n                    } else {\n                        index_use += colorize( result.cursor.substring(12), { color: \"green\", bright: true });\n                    }\n                    index_use += \"]\";\n                    output.push(index_use);\n                }\n            } else {\n                var winningPlan = result.queryPlanner.winningPlan;\n                var winningInputStage = winningPlan.inputStage.inputStage;\n\n                if (winningPlan !== undefined) {\n                    var index_use = \"Index[\";\n                    if (winningPlan.inputStage.stage === \"COLLSCAN\" || (winningInputStage !== undefined && winningInputStage.stage !== \"IXSCAN\")) {\n                        index_use += colorize( \"none\", { color: \"red\", bright: true });\n                    } else {\n                        var fullScan = false;\n                        for (index in winningInputStage.keyPattern) {\n                            if (winningInputStage.indexBounds[index][0] == \"[MinKey, MaxKey]\") {\n                                fullScan = true;\n                            }\n                        }\n\n                        if (fullScan) {\n                            index_use += colorize( winningInputStage.indexName + \" (full scan)\", { color: \"yellow\", bright: true });\n                        } else {\n                            index_use += colorize( winningInputStage.indexName, { color: \"green\", bright: true });\n                        }\n                    }\n                    index_use += \"]\";\n                    output.push(index_use);\n                }\n            }\n        }\n\n        if ( this.hasNext() ) {\n            ___it___  = this;\n            output.push(\"More[\" + colorize(\"true\", { color: \"green\", bright: true }) + \"]\");\n        }\n        print(output.join(\" -- \"));\n    }\n    catch ( e ){\n        print( e );\n    }\n};\n\nfunction isInArray(array, value) {\n    return array.indexOf(value) > -1;\n}\n\ntojsonObject = function( x, indent, nolint, nocolor, sort_keys ) {\n    var lineEnding = nolint ? \" \" : \"\\n\";\n    var tabSpace = nolint ? \"\" : __indent;\n    var sortKeys = (null == sort_keys) ? mongo_hacker_config.sort_keys : sort_keys;\n\n    assert.eq( ( typeof x ) , \"object\" , \"tojsonObject needs object, not [\" + ( typeof x ) + \"]\" );\n\n    if (!indent)\n        indent = \"\";\n\n    if ( typeof( x.tojson ) == \"function\" && x.tojson != tojson ) {\n        return x.tojson( indent, nolint, nocolor );\n    }\n\n    if ( x.constructor && typeof( x.constructor.tojson ) == \"function\" && x.constructor.tojson != tojson ) {\n        return x.constructor.tojson( x, indent , nolint, nocolor );\n    }\n\n    if ( x.toString() == \"[object MaxKey]\" )\n        return \"{ $maxKey : 1 }\";\n    if ( x.toString() == \"[object MinKey]\" )\n        return \"{ $minKey : 1 }\";\n\n    var s = \"{\" + lineEnding;\n\n    // push one level of indent\n    indent += tabSpace;\n\n    var total = 0;\n    for ( var k in x ) total++;\n    if ( total === 0 ) {\n        s += indent + lineEnding;\n    }\n\n    var keys = x;\n    if ( typeof( x._simpleKeys ) == \"function\" )\n        keys = x._simpleKeys();\n    var num = 1;\n\n    var keylist=[];\n\n    for(var key in keys)\n        keylist.push(key);\n\n    if ( sortKeys ) {\n        // Disable sorting if this object looks like an index spec\n        if ( (isInArray(keylist, \"v\") && isInArray(keylist, \"key\") && isInArray(keylist, \"name\") && isInArray(keylist, \"ns\")) ) {\n            sortKeys = false;\n        } else {\n            keylist.sort();\n        }\n    }\n\n    for ( var i=0; i<keylist.length; i++) {\n        var key=keylist[i];\n\n        var val = x[key];\n        if ( val == DB.prototype || val == DBCollection.prototype )\n            continue;\n\n        var color = mongo_hacker_config.colors.key;\n        s += indent + colorize(\"\\\"\" + key + \"\\\"\", color, nocolor) + \": \" + tojson( val, indent , nolint, nocolor, sortKeys );\n        if (num != total) {\n            s += \",\";\n            num++;\n        }\n        s += lineEnding;\n    }\n\n    // pop one level of indent\n    indent = indent.substring(__indent.length);\n    return s + indent + \"}\";\n};\n\ntojson = function( x, indent , nolint, nocolor, sort_keys ) {\n\n    var sortKeys = (null == sort_keys) ? mongo_hacker_config.sort_keys : sort_keys;\n\n    if ( x === null )\n        return colorize(\"null\", mongo_hacker_config.colors['null'], nocolor);\n\n    if ( x === undefined )\n        return colorize(\"undefined\", mongo_hacker_config.colors['undefined'], nocolor);\n\n    if ( x.isObjectId ) {\n        var color = mongo_hacker_config.colors['objectid'];\n        return surround('ObjectId', colorize('\"' + x.str + '\"', color, nocolor));\n    }\n\n    if (!indent)\n        indent = \"\";\n\n    var s;\n    switch ( typeof x ) {\n    case \"string\": {\n        s = \"\\\"\";\n        for ( var i=0; i<x.length; i++ ){\n            switch (x[i]){\n                case '\"': s += '\\\\\"'; break;\n                case '\\\\': s += '\\\\\\\\'; break;\n                case '\\b': s += '\\\\b'; break;\n                case '\\f': s += '\\\\f'; break;\n                case '\\n': s += '\\\\n'; break;\n                case '\\r': s += '\\\\r'; break;\n                case '\\t': s += '\\\\t'; break;\n\n                default: {\n                    var code = x.charCodeAt(i);\n                    if (code < 0x20){\n                        s += (code < 0x10 ? '\\\\u000' : '\\\\u00') + code.toString(16);\n                    } else {\n                        s += x[i];\n                    }\n                }\n            }\n        }\n        s += \"\\\"\";\n        return colorize(s, mongo_hacker_config.colors.string, nocolor);\n    }\n    case \"number\":\n        return colorize(x, mongo_hacker_config.colors.number, nocolor);\n    case \"boolean\":\n        return colorize(\"\" + x, mongo_hacker_config.colors['boolean'], nocolor);\n    case \"object\": {\n        s = tojsonObject( x, indent , nolint, nocolor, sortKeys );\n        if ( ( nolint === null || nolint === true ) && s.length < 80 && ( indent === null || indent.length === 0 ) ){\n            s = s.replace( /[\\s\\r\\n ]+/gm , \" \" );\n        }\n        return s;\n    }\n    case \"function\":\n        return colorize(x.toString(), mongo_hacker_config.colors['function'], nocolor);\n    default:\n        throw \"tojson can't handle type \" + ( typeof x );\n    }\n\n};\n\n\nDBQuery.prototype._validate = function( o ){\n    var firstKey = null;\n    for (var k in o) { firstKey = k; break; }\n\n    if (firstKey !== null && firstKey[0] == '$') {\n        // for mods we only validate partially, for example keys may have dots\n        this._validateObject( o );\n    } else {\n        // we're basically inserting a brand new object, do full validation\n        this._validateForStorage( o );\n    }\n};\n\nDBQuery.prototype._validateObject = function( o ){\n    if (typeof(o) != \"object\")\n        throw \"attempted to save a \" + typeof(o) + \" value.  document expected.\";\n\n    if ( o._ensureSpecial && o._checkModify )\n        throw \"can't save a DBQuery object\";\n};\n\nDBQuery.prototype._validateForStorage = function( o ){\n    this._validateObject( o );\n    for ( var k in o ){\n        if ( k.indexOf( \".\" ) >= 0 ) {\n            throw \"can't have . in field names [\" + k + \"]\" ;\n        }\n\n        if ( k.indexOf( \"$\" ) === 0 && ! DBCollection._allowedFields[k] ) {\n            throw \"field names cannot start with $ [\" + k + \"]\";\n        }\n\n        if ( o[k] !== null && typeof( o[k] ) === \"object\" ) {\n            this._validateForStorage( o[k] );\n        }\n    }\n};\n\nDBQuery.prototype._checkMulti = function(){\n  if(this._limit > 0 || this._skip > 0){\n    var ids = this.clone().select({_id: 1}).map(function(o){return o._id;});\n    this._query['_id'] = {'$in': ids};\n    return true;\n  } else {\n    return false;\n  }\n};\n\nDBQuery.prototype.ugly = function(){\n    this._prettyShell = false;\n    return this;\n}\n\nDB.prototype.shutdownServer = function(opts) {\n    if( \"admin\" != this._name ){\n        return \"shutdown command only works with the admin database; try 'use admin'\";\n    }\n\n    cmd = {\"shutdown\" : 1};\n    opts = opts || {};\n    for (var o in opts) {\n        cmd[o] = opts[o];\n    }\n\n    try {\n        var res = this.runCommand(cmd);\n        if( res )\n            throw \"shutdownServer failed: \" + res.errmsg;\n        throw \"shutdownServer failed\";\n    }\n    catch ( e ){\n        assert( e.message.indexOf( \"error doing query: failed\" ) >= 0 , \"unexpected error: \" + tojson( e ) );\n        print( \"server should be down...\" );\n    }\n}\n// helper function to format delta counts\nfunction delta(currentCount, previousCount) {\n    var delta = Number(currentCount - previousCount);\n    var formatted_delta;\n    if (isNaN(delta)) {\n      formatted_delta = colorize(\"(first count)\", { color: 'blue' });\n    } else if (delta == 0) {\n      formatted_delta = colorize(\"(=)\", { color: 'blue' });\n    } else if (delta > 0) {\n      formatted_delta = colorize(\"(+\" + delta.commify() + \")\", { color: 'green' });\n    } else if (delta < 0) {\n      formatted_delta = colorize(\"(\" + delta.commify() + \")\", { color: 'red' });\n    } else {\n      formatted_delta = (delta + \" not supported\");\n    }\n    return formatted_delta;\n}\n\n// global variable (to ensure \"persistence\" of document counts)\nshellHelper.previousDocumentCount = {};\n\n// \"count documents\", a bit akin to \"show collections\"\nshellHelper.count = function (what) {\n    assert(typeof what == \"string\");\n\n    var args = what.split( /\\s+/ );\n    what = args[0]\n    args = args.splice(1)\n\n    if (what == \"collections\" || what == \"tables\") {\n        databaseNames = db.getMongo().getDatabaseNames();\n        collectionCounts = databaseNames.map(function (databaseName) {\n            var count = db.getMongo().getDB(databaseName).getCollectionNames().length;\n            return (count.commify() + \" collection(s)\");\n        });\n        databaseNames = colorizeAll(databaseNames, mongo_hacker_config['colors']['databaseNames']);\n        printPaddedColumns(databaseNames, collectionCounts);\n        return \"\";\n    }\n\n    if (what == \"documents\" || what == \"docs\") {\n        collectionNames = db.getCollectionNames().filter(function (collectionName) {\n            // exclude \"system\" collections from \"count\" operation\n            return !collectionName.startsWith('system.');\n        });\n        documentCounts = collectionNames.map(function (collectionName) {\n            var count = db.getCollection(collectionName).count();\n            return (count.commify() + \" document(s)\");\n        });\n        deltaCounts = collectionNames.map(function (collectionName) {\n            // retrieve the previous document count for this collection\n            var previous = shellHelper.previousDocumentCount[collectionName];\n            // determine the current document count for this collection\n            var current = db.getCollection(collectionName).count();\n            // update the stored document count for this collection\n            shellHelper.previousDocumentCount[collectionName] = current;\n            // format the delta since last count\n            return delta(current, previous);\n        });\n        collectionNames = colorizeAll(collectionNames, mongo_hacker_config['colors']['collectionNames']);\n        if (mongo_hacker_config['count_deltas']) {\n            printPaddedColumns(collectionNames, documentCounts, deltaCounts);\n        } else {\n            printPaddedColumns(collectionNames, documentCounts);\n        }\n\n        return \"\";\n    }\n\n    if (what == \"index\" || what == \"indexes\") {\n        db.indexStats(\"\", 1);\n        return \"\"\n    }\n\n    throw \"don't know how to count [\" + what + \"]\";\n\n}\nDBRef.prototype.__toString = DBRef.prototype.toString;\nDBRef.prototype.toString = function () {\n  var org = this.__toString();\n  var config = mongo_hacker_config.dbref;\n  if (!config.extended_info) {\n    return org;\n  }\n  var additional = {};\n  var o = this;\n  for (var p in o) {\n    if (typeof o[p] === 'function') {\n      continue;\n    }\n    if (!config.plain && (p === '$ref' || p === '$id')) {\n      continue;\n    }\n    if (config.db_if_differs && p === '$db' && o[p] === db.getName()) {\n      continue;\n    }\n    additional[p] = o[p];\n  }\n  if (config.plain) {\n    return tojsonObject(additional, undefined, true);\n  }\n  return Object.keys(additional).length\n    ? (org.slice(0, -1) + \", \" + tojsonObject(additional, undefined, true) + \")\")\n    : org;\n};\n//----------------------------------------------------------------------------\n// findAndModify Helper\n//----------------------------------------------------------------------------\nDBQuery.prototype._findAndModify = function( options ) {\n    var findAndModify = {\n        'findandmodify': this._collection.getName(),\n        'query': this._query,\n        'new': true,\n        'fields': this._fields,\n        'upsert': this._upsert || false,\n        'sort': this._query.orderby || {},\n    };\n\n    for (var key in options){\n        findAndModify[key] = options[key];\n    };\n\n    var result = this._db.runCommand( findAndModify );\n    if ( ! result.ok ){\n        throw \"findAndModifyFailed failed: \" + tojson( result );\n    };\n    return result.value;\n};\n\n//----------------------------------------------------------------------------\n// findAndModify Terminal Variants\n//----------------------------------------------------------------------------\nDBQuery.prototype.updateAndGet = function( update ) {\n    return this._findAndModify({ 'update': update });\n};\n\nDBQuery.prototype.getAndUpdate = function( update ) {\n    return this._findAndModify({ 'update': update, 'new': false });\n};\n\nDBQuery.prototype.replaceAndGet = function( replacement ) {\n    return this._findAndModify({ 'update': replacement });\n};\n\nDBQuery.prototype.getAndReplace = function( replacement ) {\n    return this._findAndModify({ 'update': replacement, 'new': false });\n};\n\nDBQuery.prototype.getAndRemove = function() {\n    return this._findAndModify({ 'remove': true })\n};function runMatch(cmd, args, regexp) {\n    clearRawMongoProgramOutput();\n    if (args) {\n        run(cmd, args);\n    } else {\n        run(cmd);\n    }\n    var output = rawMongoProgramOutput();\n    return output.match(regexp);\n};\n\nfunction getEnv(env_var) {\n    var env_regex = new RegExp(' ' + env_var + '=(.*)');\n    return runMatch('env', '', env_regex)[1];\n};\n\nfunction getVersion() {\n    var regexp = /version: (\\d).(\\d).(\\d)/;\n    return runMatch('mongo', '--version', regexp).slice(1, 4);\n};\n\nfunction isMongos() {\n    return db.isMaster().msg == 'isdbgrid';\n};\n\nfunction getSlowms(){\n    if(!isMongos()){\n        return db.getProfilingStatus().slowms;\n    } else {\n        return 100;\n    }\n};\n\nfunction maxLength(listOfNames) {\n    return listOfNames.reduce(function(maxLength, name) {\n        return (name.length > maxLength) ? name.length : maxLength ;\n    }, 0);\n};\n\nfunction printPaddedColumns() {\n    var columnWidths = Array.prototype.map.call(\n      arguments,\n      function(column) {\n        return maxLength(column);\n      }\n    );\n\n    for (i = 0; i < arguments[0].length; i++) {\n        row = \"\";\n        for (j = 0; j < arguments.length; j++) {\n            row += arguments[j][i].toString().pad(columnWidths[j], (j == 0));\n            if (j < (arguments.length - 1)) {\n                separator = ((j == 0) ?\n                    mongo_hacker_config['column_separator'] :\n                    mongo_hacker_config['value_separator']\n                );\n                row += \" \" + separator + \" \";\n            }\n        }\n        print(row);\n    }\n\n    return null;\n};\n\nfunction runOnDbs(regexp, callback) {\n    var originalDb = db.getName();\n    db.getMongo().getDBs().databases.filter(function(db) {\n        return db.name.match(regexp); }\n    ).forEach(function(dbEntry) {\n        db = db.getSiblingDB(dbEntry.name);\n        callback(db);\n    });\n    db = db.getSiblingDB(originalDb);\n}\n// Override group because map/reduce style is deprecated\nDBCollection.prototype.agg_group = function( name, group_field, operation, op_value, filter ) {\n    var ops = [];\n    var group_op = { $group: { _id: '$' + group_field } };\n\n    if (filter !== undefined) {\n        ops.push({ '$match': filter });\n    }\n\n    group_op['$group'][name] = { };\n    group_op['$group'][name]['$' + operation] = op_value;\n    ops.push(group_op);\n\n    return this.aggregate(ops);\n};\n\n// Function that groups and counts by group after applying filter\nDBCollection.prototype.gcount = function( group_field, filter ) {\n    return this.agg_group('count', group_field, 'sum', 1, filter);\n};\n\n// Function that groups and sums sum_field after applying filter\nDBCollection.prototype.gsum = function( group_field, sum_field, filter ) {\n    return this.agg_group('sum', group_field, 'sum', '$' + sum_field, filter);\n};\n\n// Function that groups and averages avg_feld after applying filter\nDBCollection.prototype.gavg = function( group_field, avg_field, filter ) {\n    return this.agg_group('avg', group_field, 'avg', '$' + avg_field, filter);\n};\n// Improve the default prompt with hostname, process type, and version\nprompt = function() {\n    var serverstatus = db.serverStatus();\n    var host = serverstatus.host.split('.')[0];\n    var process = serverstatus.process;\n    var version = db.serverBuildInfo().version;\n    var repl_set = db._adminCommand({\"replSetGetStatus\": 1}).ok !== 0;\n    var rs_state = '';\n    if(repl_set) {\n        var status = rs.status();\n        var members = status.members;\n        var rs_name = status.set;\n        for(var i = 0; i<members.length; i++){\n            if(members[i].self === true){\n                rs_state = '[' + members[i].stateStr + ':' + rs_name + ']';\n            }\n        };\n    }\n    var state = isMongos() ? '[mongos]' : rs_state;\n    return host + '(' + process + '-' + version + ')' + state + ' ' + db + '> ';\n};\n\n// Begin PS Hack\n// Copyright (c) 2016 Andrew Young\n// SPDX-License-Identifier: MIT\n\nfunction printTableRow(row, columnWidths) {\n    var pad = function(x, i) {\n        return x.pad(i).slice(-i).toString();\n    };\n    var line = \"\";\n    for(c in columnWidths) {\n        line = line + pad(row[c], columnWidths[c]) + \" \";\n    }\n    print(line);\n}\n\nfunction printTable(headers, rows) {\n    // printTable(headers: Array[String], rows: Array[Array[String]])\n\n    // Find column widths\n    \n    var columnWidths = [];\n\n    for(c in headers) {\n        columnWidths[c] = headers[c].length;\n    }\n\n    for(r in rows) {\n        var row = rows[r];\n        for (c in headers) {\n            row[c] = row[c].toString();\n            columnWidths[c] = Math.max(columnWidths[c], row[c].length);\n        }\n    }\n\n    // Print Table\n    var hr = function(l) {\n        return new Array(l + 1).join(\"-\");\n    };\n    var hrs = [];\n    for(c in columnWidths) {\n        hrs.push(hr(columnWidths[c]));\n    }\n    printTableRow(headers, columnWidths);\n    printTableRow(hrs, columnWidths);\n    rows.forEach(function(row) { printTableRow(row, columnWidths); });\n    \n}\n\nfunction getConnections() {\n    return db.currentOp(true).inprog.filter(function(x) { return x.connectionId; } );\n}\n\nshellHelper.ps = function() {\n    var headers = [\n        \"Connection\",\n        \"ID\",\n        \"Client\",\n        \"S\",\n        \"Active\",\n        \"Time\",\n        \"WaitLock\",\n        \"Operation\",\n        \"Plan\",\n        \"Namespace\"\n    ];\n\n\n    var rows = [];\n    \n    var connections = getConnections();\n\n    connections.forEach(function(op) {\n        var connectionId = op.connectionId;\n        var opId = op.opid || \"\";\n        var client = op.client || op.client_s || \"\";\n        var isMongos = op.client_s ? \"S\" : \"\";\n        var active = op.active ? \"Active\" : \"Idle\";\n        var time = op.secs_running || \"\";\n        var waitingForLock = op.waitingForLock ? \"Yes\" : \"No\";\n        var opName = op.op || \"\";\n        var plan = op.planSummary || \"\";\n        var ns = op.ns || \"\";\n        \n        rows.push([\n            connectionId,\n            opId,\n            client,\n            isMongos,\n            active,\n            time,\n            waitingForLock,\n            opName,\n            plan,\n            ns\n        ]);\n    });\n\n    printTable(headers, rows);\n    \n};\n\nshellHelper.kill = function(opId) {\n    return db.killOp(opId);\n}\n\n// End PS Hack\n//----------------------------------------------------------------------------\n// Randomise API\n//----------------------------------------------------------------------------\n\nfunction randomWord(length, words, seed){\n    /* Return a random word(s).\n        length: length of each word (default is 5 letters).\n        words: number of words (default is 1 word).\n        seed: a word to be planted randomly amongst the word(s), good for search. (optional)\n    */\n    words = typeof words !== 'undefined' ? words : 1;\n    length = typeof length !== 'undefined' ? length : 5;\n    var seedOn = typeof seed !== 'undefined';\n    var text = \"\";\n    var possible =\"abcdefghijklmnopqrstuvwxyz\";\n    var firstword = true;\n    for (var j=0; j < words; j++){\n        var word = \"\";\n        for (var i=0; i < length; i++){\n            word += possible.charAt(Random.randInt(possible.length));\n        }\n        /* Plant a seeded word */\n        if (seedOn == true){\n            var randomBool = Random.rand() >= 0.8;\n            if (randomBool == true){\n                if (firstword == true){ text = seed; firstword = false;}\n                else {text += \" \" + seed;}\n                seedOn = false;\n            }\n        }\n        if (firstword == true){ text = word; firstword = false;}\n        else {text += \" \" + word;}\n    }\n    return text;\n};\n\nfunction randomNumber(max){\n    /* Return a random number\n        max: highest random number (default is 100).\n    */\n    max = typeof max !== 'undefined' ? max : 100;\n    return Random.randInt(max);\n};\n\nfunction randomDate(start, end){\n    /* Return a random date between start and end values. \n       start: Date(), default 2 years ago. \n       end: Date(), default today.\n    */\n    end = typeof end !== 'undefined' ? end : new Date();\n    if (typeof start === 'undefined') { \n        start = new Date(end.getTime());\n        start.setYear(start.getFullYear() - 2);\n    }\n    return new Date(start.getTime() + Random.randInt(end.getTime() - start.getTime()));\n};\n// Better show dbs\nshellHelper.show = function (what) {\n    assert(typeof what == \"string\");\n\n    var args = what.split( /\\s+/ );\n    what = args[0]\n    args = args.splice(1)\n\n    if (what == \"profile\") {\n        if (db.system.profile.count() == 0) {\n            print(\"db.system.profile is empty\");\n            print(\"Use db.setProfilingLevel(2) will enable profiling\");\n            print(\"Use db.system.profile.find() to show raw profile entries\");\n        }\n        else {\n            print();\n            db.system.profile.find({ millis: { $gt: 0} }).sort({ $natural: -1 }).limit(5).forEach(\n                function (x) {\n                    print(\"\" + x.op + \"\\t\" + x.ns + \" \" + x.millis + \"ms \" + String(x.ts).substring(0, 24));\n                    var l = \"\";\n                    for ( var z in x ){\n                        if ( z == \"op\" || z == \"ns\" || z == \"millis\" || z == \"ts\" )\n                            continue;\n\n                        var val = x[z];\n                        var mytype = typeof(val);\n\n                        if ( mytype == \"string\" ||\n                             mytype == \"number\" )\n                            l += z + \":\" + val + \" \";\n                        else if ( mytype == \"object\" )\n                            l += z + \":\" + tojson(val ) + \" \";\n                        else if ( mytype == \"boolean\" )\n                            l += z + \" \";\n                        else\n                            l += z + \":\" + val + \" \";\n\n                    }\n                    print( l );\n                    print(\"\\n\");\n                }\n            )\n        }\n        return \"\";\n    }\n\n    if (what == \"users\") {\n        db.getUsers().forEach(printjson);\n        return \"\";\n    }\n\n    if (what == \"roles\") {\n        db.getRoles({showBuiltinRoles: true}).forEach(printjson);\n        return \"\";\n    }\n\n    if (what == \"collections\" || what == \"tables\") {\n        var collectionNames = db.getCollectionNames();\n        var collectionSizes = collectionNames.map(function (name) {\n            var stats = db.getCollection(name).stats();\n            var size = (stats.size / 1024 / 1024).toFixed(3);\n            return (size + \"MB\");\n        });\n        var collectionStorageSizes = collectionNames.map(function (name) {\n            var stats = db.getCollection(name).stats();\n            var storageSize = (stats.storageSize / 1024 / 1024).toFixed(3);\n            return (storageSize + \"MB\");\n        });\n        collectionNames = colorizeAll(collectionNames, mongo_hacker_config['colors']['collectionNames']);\n        printPaddedColumns(collectionNames, collectionSizes, collectionStorageSizes);\n        return \"\";\n    }\n\n    if (what == \"dbs\" || what == \"databases\") {\n        var databases = db.getMongo().getDBs().databases.sort(function(a, b) { return a.name.localeCompare(b.name) });\n        var databaseNames = databases.map(function(db) {\n            return db.name;\n        });\n        var databaseSizes = databases.map(function(db) {\n            var sizeInGigaBytes = (db.sizeOnDisk / 1024 / 1024 / 1024).toFixed(3);\n            return (db.sizeOnDisk > 1) ? (sizeInGigaBytes + \"GB\") : \"(empty)\";\n        });\n        databaseNames = colorizeAll(databaseNames, mongo_hacker_config['colors']['databaseNames']);\n        printPaddedColumns(databaseNames, databaseSizes);\n        return \"\";\n    }\n\n    if (what == \"log\" ) {\n        var n = \"global\";\n        if ( args.length > 0 )\n            n = args[0]\n\n        var res = db.adminCommand( { getLog : n } );\n        if ( ! res.ok ) {\n            print(\"Error while trying to show \" + n + \" log: \" + res.errmsg);\n            return \"\";\n        }\n        for ( var i=0; i<res.log.length; i++){\n            print( res.log[i] )\n        }\n        return \"\"\n    }\n\n    if (what == \"logs\" ) {\n        var res = db.adminCommand( { getLog : \"*\" } )\n        if ( ! res.ok ) {\n            print(\"Error while trying to show logs: \" + res.errmsg);\n            return \"\";\n        }\n        for ( var i=0; i<res.names.length; i++){\n            print( res.names[i] )\n        }\n        return \"\"\n    }\n\n    if (what == \"startupWarnings\" ) {\n        var dbDeclared, ex;\n        try {\n            // !!db essentially casts db to a boolean\n            // Will throw a reference exception if db hasn't been declared.\n            dbDeclared = !!db;\n        } catch (ex) {\n            dbDeclared = false;\n        }\n        if (dbDeclared) {\n            var res = db.adminCommand( { getLog : \"startupWarnings\" } );\n            if ( res.ok ) {\n                if (res.log.length == 0) {\n                    return \"\";\n                }\n                print( \"Server has startup warnings: \" );\n                for ( var i=0; i<res.log.length; i++){\n                    print( res.log[i] )\n                }\n                return \"\";\n            } else if (res.errmsg == \"no such cmd: getLog\" ) {\n                // Don't print if the command is not available\n                return \"\";\n            } else if (res.code == 13 /*unauthorized*/ ||\n                       res.errmsg == \"unauthorized\" ||\n                       res.errmsg == \"need to login\") {\n                // Don't print if startupWarnings command failed due to auth\n                return \"\";\n            } else {\n                print(\"Error while trying to show server startup warnings: \" + res.errmsg);\n                return \"\";\n            }\n        } else {\n            print(\"Cannot show startupWarnings, \\\"db\\\" is not set\");\n            return \"\";\n        }\n    }\n\n    throw \"don't know how to show [\" + what + \"]\";\n\n}\nsh.getRecentMigrations = function () {\n    var configDB = db.getSiblingDB(\"config\");\n    var yesterday = new Date( new Date() - 24 * 60 * 60 * 1000 );\n    var result = [];\n    result = result.concat(configDB.changelog.aggregate( [\n        { $match : { time : { $gt : yesterday }, what : \"moveChunk.from\", \"details.errmsg\" : {\n            \"$exists\" : false } } },\n        { $group : { _id: { msg: \"$details.errmsg\" }, count : { \"$sum\":1 } } },\n        { $project : { _id : { $ifNull: [ \"$_id.msg\", \"Success\" ] }, count : \"$count\" } }\n    ] ).result);\n    result = result.concat(configDB.changelog.aggregate( [\n        { $match : { time : { $gt : yesterday }, what : \"moveChunk.from\", \"details.errmsg\" : {\n            \"$exists\" : true } } },\n        { $group : { _id: { msg: \"$details.errmsg\", from : \"$details.from\", to: \"$details.to\" },\n            count : { \"$sum\":1 } } },\n        { $project : { _id : \"$_id.msg\" , from : \"$_id.from\", to : \"$_id.to\" , count : \"$count\" } }\n    ] ).result);\n    return result;\n};\n\nprintShardingStatus = function( configDB , verbose ){\n    if (configDB === undefined)\n        configDB = db.getSisterDB('config')\n\n    var version = configDB.getCollection( \"version\" ).findOne();\n    if ( version == null ){\n        print( \"printShardingStatus: this db does not have sharding enabled. be sure you are\",\n                \"connecting to a mongos from the shell and not to a mongod.\" );\n        return;\n    }\n\n    var raw = \"\";\n    var output = function(s){\n        raw += s + \"\\n\";\n    }\n    output( \"--- Sharding Status --- \" );\n    output( \"  sharding version: \" + tojson( configDB.getCollection( \"version\" ).findOne(), \"  \" ) );\n\n    output( \"  shards:\" );\n    configDB.shards.find().sort( { _id : 1 } ).forEach(\n        function(z){\n            output( \"    \" + tojsononeline( z ) );\n        }\n    );\n\n    // All of the balancer information functions below depend on a connection to a liveDB\n    // This isn't normally a problem, but can cause issues in testing and running with --nodb\n    if ( typeof db !== \"undefined\" ) {\n        output( \"  balancer:\" );\n\n        //Is the balancer currently enabled\n        output( \"\\tCurrently enabled:  \" + ( sh.getBalancerState() ?\n            colorize(\"yes\", {color: \"cyan\"}) :\n            colorize(\"no\",  {color: \"red\"}) ) );\n\n        //Is the balancer currently active\n        output( \"\\tCurrently running:  \" +\n            colorize(( sh.isBalancerRunning() ? \"yes\" : \"no\" ), {color: \"gray\"}) );\n\n        //Output details of the current balancer round\n        var balLock = sh.getBalancerLockDetails();\n        if ( balLock ) {\n            output( \"\\t\\tBalancer lock taken at \" +\n                colorize(balLock.when, {color: \"gray\"}) + \" by \" +\n                colorize(balLock.who,  {color: \"cyan\"}) );\n        }\n\n        //Output the balancer window\n        var balSettings = sh.getBalancerWindow();\n        if ( balSettings ) {\n            output( \"\\t\\tBalancer active window is set between \" +\n                colorize(balSettings.start, {color: \"gray\"}) + \" and \" +\n                colorize(balSettings.stop,  {color: \"gray\"}) + \" server local time\");\n        }\n\n        //Output the list of active migrations\n        var activeMigrations = sh.getActiveMigrations();\n        if (activeMigrations.length > 0 ){\n            output(\"\\tCollections with active migrations: \");\n            activeMigrations.forEach( function(migration){\n                output(\"\\t\\t\" + \n                    colorize(migration._id,  {color: \"cyan\"})+ \" started at \" + \n                    colorize(migration.when, {color: \"gray\"}) );\n            });\n        }\n\n        // Actionlog and version checking only works on 2.7 and greater\n        var versionHasActionlog = false;\n        var metaDataVersion = configDB.getCollection(\"version\").findOne().currentVersion;\n        if ( metaDataVersion > 5 ) {\n            versionHasActionlog = true;\n        }\n        if ( metaDataVersion == 5 ) {\n            var verArray = db.serverBuildInfo().versionArray;\n            if (verArray[0] == 2 && verArray[1] > 6){\n                versionHasActionlog = true;\n            }\n        }\n\n        if ( versionHasActionlog ) {\n            //Review config.actionlog for errors\n            var actionReport = sh.getRecentFailedRounds();\n            //Always print the number of failed rounds\n            output( \"\\tFailed balancer rounds in last 5 attempts:  \" + \n                colorize(actionReport.count, {color: \"red\"}) );\n\n            //Only print the errors if there are any\n            if ( actionReport.count > 0 ){\n                output( \"\\tLast reported error:  \"    + actionReport.lastErr );\n                output( \"\\tTime of Reported error:  \" + actionReport.lastTime );\n            }\n\n            output(\"\\tMigration Results for the last 24 hours: \");\n            var migrations = sh.getRecentMigrations();\n            if(migrations.length > 0) {\n                migrations.forEach( function(x) {\n                    if (x._id === \"Success\"){\n                        output( \"\\t\\t\" + colorize(x.count, {color: \"gray\"}) + \n                            \" : \"+ colorize(x._id, {color: \"cyan\"}));\n                    } else {\n                        output( \"\\t\\t\" + colorize(x.count, {color: \"gray\"}) + \n                            \" : Failed with error '\" + colorize(x._id, {color: \"red\"}) +\n                        \"', from \" + x.from + \" to \" + x.to );\n                    }\n                });\n            } else {\n                    output( \"\\t\\tNo recent migrations\");\n            }\n        }\n    }\n\n    output( \"  databases:\" );\n    configDB.databases.find().sort( { name : 1 } ).forEach(\n        function(db){\n            output( \"    \" + tojsononeline(db,\"\",true) );\n\n            if (db.partitioned){\n                configDB.collections.find( { _id : new RegExp( \"^\" +\n                    RegExp.escape(db._id) + \"\\\\.\" ) } ).\n                    sort( { _id : 1 } ).forEach( function( coll ){\n                        if ( coll.dropped == false ){\n                            output( \"    \" + coll._id );\n                            output( \"      shard key: \" + tojson(coll.key, 0, true) );\n                            output( \"      chunks:\" );\n\n                            res = configDB.chunks.aggregate(\n                                { \"$match\": { ns: coll._id } },\n                                { \"$group\": { _id: \"$shard\", nChunks: { \"$sum\": 1 } } },\n                                { \"$project\" : { _id : 0 , shard : \"$_id\" , nChunks : \"$nChunks\" } },\n                                { \"$sort\" : { shard : 1 } }\n                            ).result\n\n                            var totalChunks = 0;\n                            res.forEach( function(z){\n                                totalChunks += z.nChunks;\n                                output( \"        \" + z.shard + \": \" + z.nChunks );\n                            } )\n\n                            if ( totalChunks < 20 || verbose ){\n                                configDB.chunks.find( { \"ns\" : coll._id } ).sort( { min : 1 } ).forEach(\n                                    function(chunk){\n                                        output( \"        \" +\n                                            tojson( chunk.min, 0, true) + \" -> \" +\n                                            tojson( chunk.max, 0, true ) +\n                                            \" on: \" + colorize(chunk.shard, {color: 'cyan'}) + \" \" + tojson( chunk.lastmod ) + \" \" +\n                                            ( chunk.jumbo ? \"jumbo \" : \"\" )\n                                        );\n                                    }\n                                );\n                            }\n                            else {\n                                output( \"\\t\\t\\ttoo many chunks to print, use verbose if you want to force print\" );\n                            }\n\n                            configDB.tags.find( { ns : coll._id } ).sort( { min : 1 } ).forEach(\n                                function( tag ) {\n                                    output( \"        tag: \" + tag.tag + \"  \" + tojson( tag.min ) + \" -> \" + tojson( tag.max ) );\n                                }\n                            )\n                        }\n                    }\n                )\n            }\n        }\n    );\n\n    print( raw );\n}\nfunction base64ToHex(base64) {\n    var base64Digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var hexDigits = \"0123456789abcdef\";\n    var hex = \"\";\n    for (var i = 0; i < 24; ) {\n        var e1 = base64Digits.indexOf(base64[i++]);\n        var e2 = base64Digits.indexOf(base64[i++]);\n        var e3 = base64Digits.indexOf(base64[i++]);\n        var e4 = base64Digits.indexOf(base64[i++]);\n        var c1 = (e1 << 2) | (e2 >> 4);\n        var c2 = ((e2 & 15) << 4) | (e3 >> 2);\n        var c3 = ((e3 & 3) << 6) | e4;\n        hex += hexDigits[c1 >> 4];\n        hex += hexDigits[c1 & 15];\n        if (e3 != 64) {\n            hex += hexDigits[c2 >> 4];\n            hex += hexDigits[c2 & 15];\n        }\n        if (e4 != 64) {\n            hex += hexDigits[c3 >> 4];\n            hex += hexDigits[c3 & 15];\n        }\n    }\n    return hex;\n}\n\nfunction hexToBase64(hex) {\n    var base64Digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var base64 = \"\";\n    var group;\n    for (var i = 0; i < 30; i += 6) {\n        group = parseInt(hex.substr(i, 6), 16);\n        base64 += base64Digits[(group >> 18) & 0x3f];\n        base64 += base64Digits[(group >> 12) & 0x3f];\n        base64 += base64Digits[(group >> 6) & 0x3f];\n        base64 += base64Digits[group & 0x3f];\n    }\n    group = parseInt(hex.substr(30, 2), 16);\n    base64 += base64Digits[(group >> 2) & 0x3f];\n    base64 += base64Digits[(group << 4) & 0x3f];\n    base64 += \"==\";\n    return base64;\n}\n\nvar platformSpecificUuidModifications = {\n    \"java\": function (hex) {\n        var msb = hex.substr(0, 16);\n        var lsb = hex.substr(16, 16);\n        msb = msb.substr(14, 2) + msb.substr(12, 2) + msb.substr(10, 2) + msb.substr(8, 2)\n            + msb.substr(6, 2) + msb.substr(4, 2) + msb.substr(2, 2) + msb.substr(0, 2);\n        lsb = lsb.substr(14, 2) + lsb.substr(12, 2) + lsb.substr(10, 2) + lsb.substr(8, 2)\n            + lsb.substr(6, 2) + lsb.substr(4, 2) + lsb.substr(2, 2) + lsb.substr(0, 2);\n        return msb + lsb;\n    },\n    \"c#\": function (hex) {\n        return hex.substr(6, 2) + hex.substr(4, 2) + hex.substr(2, 2) + hex.substr(0, 2)\n            + hex.substr(10, 2) + hex.substr(8, 2) + hex.substr(14, 2) + hex.substr(12, 2)\n            + hex.substr(16, 16);\n    },\n    \"python\": function (hex) {\n        return hex;\n    },\n    \"default\": function (hex) {\n        return hex;\n    }\n};\n\nfunction UUID(uuid, type) {\n    var hex = uuid.replace(/[{}-]/g, \"\");\n    var typeNum = 4;\n    if (type != undefined) {\n        typeNum = 3;\n        hex = platformSpecificUuidModifications[type](hex);\n    }\n    return new BinData(typeNum, hexToBase64(hex));\n}\n\nfunction uuidToString(uuid, uuidType) {\n    var uuidType = uuidType || mongo_hacker_config['uuid_type'];\n    var hex = platformSpecificUuidModifications[uuidType](base64ToHex(uuid.base64()));\n    return hex.substr(0, 8) + '-' + hex.substr(8, 4) + '-' + hex.substr(12, 4)\n        + '-' + hex.substr(16, 4) + '-' + hex.substr(20, 12);\n}\nsetVerboseShell(true);\n\nDBQuery.prototype._prettyShell = true\n\nDB.prototype._getExtraInfo = function(action) {\n    if ( typeof _verboseShell === 'undefined' || !_verboseShell ) {\n        __callLastError = true;\n        return;\n    }\n\n    // explicit w:1 so that replset getLastErrorDefaults aren't used here which would be bad.\n    var startTime = new Date().getTime();\n    var res = this.getLastErrorCmd(1);\n    if (res) {\n        if (res.err !== undefined && res.err !== null) {\n            // error occurred, display it\n            print(res.err);\n            return;\n        }\n\n        var info = action + \" \";\n        // hack for inserted because res.n is 0\n        info += action != \"Inserted\" ? res.n : 1;\n        if (res.n > 0 && res.updatedExisting !== undefined) info += \" \" + (res.updatedExisting ? \"existing\" : \"new\");\n        info += \" record(s) in \";\n        var time = new Date().getTime() - startTime;\n        var slowms = getSlowms();\n        if (time > slowms) {\n            info += colorize(time + \"ms\", { color: 'red', bright: true });\n        } else {\n            info += colorize(time + \"ms\", { color: 'green', bright: true });\n        }\n        print(info);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/aggregation.js":"//----------------------------------------------------------------------------\n// Aggregation API Extensions\n//----------------------------------------------------------------------------\n\n// Inject aggregation extension while supporting base API\nDBCollection.prototype.aggregate = function( ops, extraOpts ){\n    if (hasDollar(ops) || (ops instanceof Array && hasDollar(ops[0]))){\n        var arr = ops;\n\n        if (!ops.length) {\n            arr = [];\n            for (var i=0; i<arguments.length; i++) {\n                arr.push(arguments[i]);\n            }\n        }\n\n        if (extraOpts === undefined) {\n            extraOpts = {};\n        }\n\n        var cmd = {pipeline: arr};\n        Object.extend(cmd, extraOpts);\n\n        var res = this.runCommand(\"aggregate\", cmd);\n        if (!res.ok) {\n            printStackTrace();\n            throw \"aggregate failed: \" + tojson(res);\n        }\n        return res;\n    } else {\n        return new Aggregation( this ).match( ops || {} );\n    }\n};\n\n// Helper method for determining if parameter has dollar signs\nfunction hasDollar(fields){\n    for (k in fields){\n        if(k.indexOf('$') !== -1){\n            return true;\n        };\n    };\n    return false;\n}\n\n//----------------------------------------------------------------------------\n// Aggregation Object\n//----------------------------------------------------------------------------\nAggregation = function( collection, fields ){\n    this._collection = collection;\n    this._pipeline = [];\n    this._options = {};\n    this._shellBatchSize = 20;\n};\n\nAggregation.prototype.has_next = function() {\n    return (this._index < this._results.length);\n};\n\nAggregation.prototype.next = function() {\n    var next = this._results[this._index];\n    this._index += 1;\n    return next\n};\n\nAggregation.prototype.execute = function() {\n    // build the command\n    var aggregation = { pipeline: this._pipeline };\n    if ( this._readPreference ) {\n        aggregation[\"$readPreference\"] = this.readPreference;\n    }\n    Object.extend(aggregation, this._options);\n\n    // run the command\n    var res = this._collection.runCommand(\n        \"aggregate\", aggregation\n    );\n\n    // check result\n    if ( ! res.ok ) {\n        printStackTrace();\n        throw \"aggregation failed: \" + tojson(res);\n    }\n\n    // setup results as pseudo cursor\n    this._index = 0;\n\n    if (this._options[\"explain\"] === true) {\n        this._results = res.stages\n    } else {\n        this._results = res.result;\n    }\n\n    return this._results;\n};\n\nAggregation.prototype.shellPrint = function() {\n    if (this._results == undefined) {\n        this.execute();\n    }\n    try {\n        var i = 0;\n        while (this.has_next() && i < this._shellBatchSize) {\n            var result = this.next();\n            printjson( result );\n            i++;\n        }\n        if ( this.has_next() ) {\n            print ( \"Type \\\"it\\\" for more\" );\n            ___it___ = this;\n        }\n        else {\n            ___it___ = null;\n        }\n    }\n    catch ( e ) {\n        print( e );\n    }\n};\n\nAggregation.prototype.project = function( fields ) {\n    if ( ! fields ) {\n        throw \"project needs fields\";\n    }\n    this._pipeline.push({ \"$project\": fields });\n    return this;\n};\n\nAggregation.prototype.find = function( criteria ) {\n    if ( ! criteria ) {\n        throw \"match needs a query object\";\n    }\n    this._pipeline.push({ \"$match\": criteria });\n    return this;\n};\n\nAggregation.prototype.match = function( criteria ) {\n    if ( ! criteria ) {\n        throw \"match needs a query object\";\n    }\n    this._pipeline.push({ \"$match\": criteria });\n    return this;\n};\n\nAggregation.prototype.limit = function( limit ) {\n    if ( ! limit ) {\n        throw \"limit needs an integer indicating the limit\";\n    }\n    this._pipeline.push({ \"$limit\": limit });\n    return this;\n};\n\nAggregation.prototype.skip = function( skip ) {\n    if ( ! skip ) {\n        throw \"skip needs an integer indicating the number to skip\";\n    }\n    this._pipeline.push({ \"$skip\": skip });\n    return this;\n};\n\nAggregation.prototype.unwind = function( field ) {\n    if ( ! field ) {\n        throw \"unwind needs the key of an array field to unwind\";\n    }\n    this._pipeline.push({ \"$unwind\": \"$\" + field });\n    return this;\n};\n\nAggregation.prototype.group = function( group_expression ) {\n    if ( ! group_expression ) {\n        throw \"group needs an group expression\";\n    }\n    this._pipeline.push({ \"$group\": group_expression });\n    return this;\n};\n\nAggregation.prototype.sort = function( sort ) {\n    if ( ! sort ) {\n        throw \"sort needs a sort document\";\n    }\n    this._pipeline.push({ \"$sort\": sort });\n    return this;\n};\n\nAggregation.prototype.geoNear = function( options ) {\n    if ( ! options ) {\n        throw \"geo near requires options\"\n    }\n    this._pipeline.push({ \"$geoNear\": options });\n    return this;\n};\n\nAggregation.prototype.readPreference = function( mode ) {\n    this._readPreference = mode;\n    return this;\n};\n\nAggregation.prototype.explain = function( ) {\n    this._options['explain'] = true;\n    return this;\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/api.js":"//----------------------------------------------------------------------------\n// API Additions\n//----------------------------------------------------------------------------\nDBQuery.prototype.fields = function( fields ) {\n    this._fields = fields;\n    return this;\n};\n\nDBQuery.prototype.select = function( fields ){\n    this._fields = fields;\n    return this;\n};\n\nDBQuery.prototype.one = function(){\n    return this.limit(1)[0];\n};\n\nDBQuery.prototype.first = function(field){\n    var field = field || \"$natural\";\n    var sortBy = {};\n    sortBy[field] = 1;\n    return this.sort(sortBy).one();\n}\n\nDBQuery.prototype.reverse = function( field ){\n    var field = field || \"$natural\";\n    var sortBy = {};\n    sortBy[field] = -1;\n    return this.sort(sortBy);\n}\n\nDBQuery.prototype.last = function( field ){\n    var field = field || \"$natural\";\n    return this.reverse(field).one();\n}\n\nDB.prototype.rename = function(newName) {\n    if(newName == this.getName() || newName.length === 0)\n        return;\n\n    this.copyDatabase(this.getName(), newName, \"localhost\");\n    this.dropDatabase();\n    db = this.getSiblingDB(newName);\n};\n\nDB.prototype.indexStats = function(collectionFilter, details){\n\n    details = details || false;\n\n    collectionNames = db.getCollectionNames().filter(function (collectionName) {\n        // exclude \"system\" collections from \"count\" operation\n\n        if (!collectionFilter) {\n            return !collectionName.startsWith('system.');\n        }\n\n        if (collectionName == collectionFilter) {\n            return !collectionName.startsWith('system.');\n        }\n    });\n    documentIndexes = collectionNames.map(function (collectionName) {\n        var count = db.getCollection(collectionName).count();\n        return (count.commify() + \" document(s)\");\n    });\n\n    columnSeparator = mongo_hacker_config['column_separator'];\n\n    assert(collectionNames.length == documentIndexes.length);\n\n    maxKeyLength   = maxLength(collectionNames);\n    maxValueLength = maxLength(documentIndexes);\n\n    for (i = 0; i < collectionNames.length; i++) {\n        print(\n            colorize(collectionNames[i].pad(maxKeyLength, true), mongo_hacker_config['colors']['collectionNames'])\n            + \" \" + columnSeparator + \" \"\n            + documentIndexes[i].pad(maxValueLength)\n        );\n\n        var stats = db.getCollection(collectionNames[i]).stats();\n        var totalIndexSize = (Math.round((stats.totalIndexSize / 1024 / 1024) * 10) / 10) + \" MB\";\n\n        var indexNames = [];\n        var indexSizes = [];\n        for (indexName in stats.indexSizes) {\n            indexSizes.push((Math.round((stats.indexSizes[indexName] / 1024 / 1024) * 10) / 10) + \" MB\");\n            indexNames.push(\"  \" + indexName);\n        }\n\n        maxIndexKeyLength   = maxLength(indexNames);\n        maxIndexValueLength = maxLength(indexSizes);\n\n        print(\n            colorize(\"totalIndexSize\".pad(maxKeyLength, true), mongo_hacker_config['colors']['string'])\n            + \" \" + columnSeparator + \" \"\n            + colorize(totalIndexSize.pad(maxValueLength), mongo_hacker_config['colors']['number'])\n        );\n\n        if (details) {\n            for (var j = 0; j < indexSizes.length; j++) {\n                print(\n                    colorize(\"\" + indexNames[j].pad(maxIndexKeyLength, true), mongo_hacker_config['colors']['string'])\n                    + \" \" + columnSeparator + \" \"\n                    + colorize(indexSizes[j].pad(maxIndexValueLength), mongo_hacker_config['colors']['binData'])\n                );\n            };\n        }\n    }\n\n    return \"\";\n}\n\nMongo.prototype.getDatabaseNames = function() {\n    // this API addition gives us the following convenience function:\n    //\n    //   db.getMongo().getDatabaseNames()\n    //\n    // which is similar in use to:\n    //\n    //   db.getCollectionNames()\n    //\n    // mongo-hacker FTW :-)\n    return this.getDBs().databases.reduce(function(names, db) {\n        return names.concat(db.name);\n    }, []);\n}\n\n//----------------------------------------------------------------------------\n// API Modifications (additions and changes)\n//----------------------------------------------------------------------------\n\n// Add upsert method which has upsert set as true and multi as false\nDBQuery.prototype.upsert = function( upsert ){\n    assert( upsert , \"need an upsert object\" );\n\n    this._validate(upsert);\n    this._db._initExtraInfo();\n    this._mongo.update( this._ns , this._query , upsert , true , false );\n    this._db._getExtraInfo(\"Upserted\");\n};\n\n// Updates are always multi and never an upsert\nDBQuery.prototype.update = function( update ){\n    assert( update , \"need an update object\" );\n\n    this._checkMulti();\n    this._validate(update);\n    this._db._initExtraInfo();\n    this._mongo.update( this._ns , this._query , update , false , true );\n    this._db._getExtraInfo(\"Updated\");\n};\n\n// Replace one document\nDBQuery.prototype.replace = function( replacement ){\n    assert( replacement , \"need an update object\" );\n\n    this._validate(replacement);\n    this._db._initExtraInfo();\n    this._mongo.update( this._ns , this._query , replacement , false , false );\n    this._db._getExtraInfo(\"Replaced\");\n};\n\n// Remove is always multi\nDBQuery.prototype.remove = function(){\n    for ( var k in this._query ){\n        if ( k == \"_id\" && typeof( this._query[k] ) == \"undefined\" ){\n            throw \"can't have _id set to undefined in a remove expression\";\n        }\n    }\n\n    this._checkMulti();\n    this._db._initExtraInfo();\n    this._mongo.remove( this._ns , this._query , false );\n    this._db._getExtraInfo(\"Removed\");\n};\n\n//----------------------------------------------------------------------------\n// Full Text Search\n//----------------------------------------------------------------------------\nDBQuery.prototype.textSearch = function( search ) {\n    var text = {\n        text: this._collection.getName(),\n        search: search,\n        filter: this._query,\n        project: this._fields,\n        limit: this._limit\n    }\n\n    var result = this._db.runCommand( text );\n    return result.results;\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/auto_complete.js":"function listDbs(){\n  return db.adminCommand(\"listDatabases\").databases.map(function(d){return d.name});\n}\n\nthis.__proto__.constructor.autocomplete = listDbs;","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/cmd_search.js":"shellHelper.find = function (query) {\n    assert(typeof query == \"string\");\n\n    var args = query.split( /\\s+/ );\n    query = args[0];\n    args = args.splice(1);\n\n    if (query !== \"\") {\n        var regexp = new RegExp(query, \"i\");\n        var result = db.runCommand(\"listCommands\");\n        for (var command in result.commands) {\n            var commandObj = result.commands[command];\n            var help = commandObj.help;\n            if (commandObj.help.indexOf('\\n') != -1 ) {\n                help = commandObj.help.substring(0, commandObj.help.lastIndexOf('\\n'));\n            }\n            if (regexp.test(command) || regexp.test(help)) {\n                var numSpaces = 30 - command.length;\n                print(colorize(command, {color: 'green'}), Array(numSpaces).join(\" \"), \"-\", help);\n            }\n        }\n    }\n};\n\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/color.js":"//----------------------------------------------------------------------------\n// Color Functions\n//----------------------------------------------------------------------------\n__ansi = {\n    csi: String.fromCharCode(0x1B) + '[',\n    reset:      '0',\n    text_prop:  'm',\n    foreground: '3',\n    bright:     '1',\n    underline:  '4',\n\n    colors: {\n        black:   '0',\n        red:     '1',\n        green:   '2',\n        yellow:  '3',\n        blue:    '4',\n        magenta: '5',\n        cyan:    '6',\n        gray:    '7',\n    }\n};\n\nfunction controlCode( parameters ) {\n    if ( parameters === undefined ) {\n        parameters = \"\";\n    }\n    else if (typeof(parameters) == 'object' && (parameters instanceof Array)) {\n        parameters = parameters.join(';');\n    }\n\n    return __ansi.csi + String(parameters) + String(__ansi.text_prop);\n};\n\nfunction applyColorCode( string, properties, nocolor ) {\n    // Allow global __colorize default to be overriden\n    var applyColor = (null == nocolor) ? __colorize : !nocolor;\n\n    return applyColor ? controlCode(properties) + String(string) + controlCode() : String(string);\n};\n\nfunction colorize( string, color, nocolor ) {\n\n    var params = [];\n    var code = __ansi.foreground + __ansi.colors[color.color];\n\n    params.push(code);\n\n    if ( color.bright === true ) params.push(__ansi.bright);\n    if ( color.underline === true ) params.push(__ansi.underline);\n\n    return applyColorCode( string, params, nocolor );\n};\n\nfunction colorizeAll( strings, color, nocolor ) {\n    return strings.map(function(string) {\n        return colorize( string, color, nocolor );\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/common.js":"__indent = Array(mongo_hacker_config.indent + 1).join(' ');\n__colorize = (_isWindows() && !mongo_hacker_config['force_color']) ? false : true;\n\nObjectId.prototype.toString = function() {\n    return this.str;\n};\n\nObjectId.prototype.tojson = function(indent, nolint) {\n    return tojson(this);\n};\n\nvar dateToJson = Date.prototype.tojson;\n\nDate.prototype.tojson = function(indent, nolint, nocolor) {\n  var isoDateString = dateToJson.call(this);\n  var dateString = isoDateString.substring(8, isoDateString.length-1);\n\n  var isodate = colorize(dateString, mongo_hacker_config.colors.date, nocolor);\n  return 'ISODate(' + isodate + ')';\n};\n\nArray.tojson = function( a , indent , nolint, nocolor ){\n    var lineEnding = nolint ? \" \" : \"\\n\";\n\n    if (!indent)\n        indent = \"\";\n\n    if ( nolint )\n        indent = \"\";\n\n    if (a.length === 0) {\n        return \"[ ]\";\n    }\n\n    var s = \"[\" + lineEnding;\n    indent += __indent;\n    for ( var i=0; i<a.length; i++){\n        s += indent + tojson( a[i], indent , nolint, nocolor );\n        if ( i < a.length - 1 ){\n            s += \",\" + lineEnding;\n        }\n    }\n    if ( a.length === 0 ) {\n        s += indent;\n    }\n\n    indent = indent.substring(__indent.length);\n    s += lineEnding+indent+\"]\";\n    return s;\n};\n\nfunction surround(name, inside) {\n    return [name, '(', inside, ')'].join('');\n}\n\nNumber.prototype.commify = function() {\n    // http://stackoverflow.com/questions/2901102\n    return this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nNumberLong.prototype.tojson = function(indent, nolint, nocolor) {\n    var color = mongo_hacker_config.colors.number;\n    var output = colorize('\"' + this.toString().match(/-?\\d+/)[0] + '\"', color, nocolor);\n    return surround('NumberLong', output);\n};\n\nNumberInt.prototype.tojson = function(indent, nolint, nocolor) {\n    var color = mongo_hacker_config.colors.number;\n    var output = colorize('\"' + this.toString().match(/-?\\d+/)[0] + '\"', color, nocolor);\n    return surround('NumberInt', output);\n};\n\nBinData.prototype.tojson = function(indent , nolint, nocolor) {\n    var uuidType = mongo_hacker_config.uuid_type;\n    var uuidColor = mongo_hacker_config.colors.uuid;\n    var binDataColor = mongo_hacker_config.colors.binData;\n\n    if (this.subtype() === 3) {\n        var output = colorize('\"' + uuidToString(this) + '\"', uuidColor, nocolor) + ', '\n        output += colorize('\"' + uuidType + '\"', uuidColor)\n        return surround('UUID', output);\n    } else if (this.subtype() === 4) {\n        var output = colorize('\"' + uuidToString(this, \"default\") + '\"', uuidColor, nocolor) + ')'\n        return surround('UUID', output);\n    } else {\n        var output = colorize(this.subtype(), {color: 'red'}) + ', '\n        output += colorize('\"' + this.base64() + '\"', binDataColor, nocolor)\n        return surround('BinData', output);\n    }\n};\n\nDBQuery.prototype.shellPrint = function(){\n    try {\n        var start = new Date().getTime();\n        var n = 0;\n        while ( this.hasNext() && n < DBQuery.shellBatchSize ){\n            var s = this._prettyShell ? tojson( this.next() ) : tojson( this.next() , \"\" , true );\n            print( s );\n            n++;\n        }\n\n        var output = [];\n\n        if (typeof _verboseShell !== 'undefined' && _verboseShell) {\n            var time = new Date().getTime() - start;\n            var slowms = getSlowms();\n            var fetched = \"Fetched \" + n + \" record(s) in \";\n            if (time > slowms) {\n                fetched += colorize(time + \"ms\", { color: \"red\", bright: true });\n            } else {\n                fetched += colorize(time + \"ms\", { color: \"green\", bright: true });\n            }\n            output.push(fetched);\n        }\n\n        var paranoia = mongo_hacker_config.index_paranoia;\n\n        if (typeof paranoia !== 'undefined' && paranoia) {\n            var explain = this.clone();\n            explain._ensureSpecial();\n            explain._query.$explain = true;\n            explain._limit = Math.abs(n) * -1;\n            var result = explain.next();\n\n            if (current_version < 3) {\n                var type = result.cursor;\n\n                if (type !== undefined) {\n                    var index_use = \"Index[\";\n                    if (type == \"BasicCursor\") {\n                        index_use += colorize( \"none\", { color: \"red\", bright: true });\n                    } else {\n                        index_use += colorize( result.cursor.substring(12), { color: \"green\", bright: true });\n                    }\n                    index_use += \"]\";\n                    output.push(index_use);\n                }\n            } else {\n                var winningPlan = result.queryPlanner.winningPlan;\n                var winningInputStage = winningPlan.inputStage.inputStage;\n\n                if (winningPlan !== undefined) {\n                    var index_use = \"Index[\";\n                    if (winningPlan.inputStage.stage === \"COLLSCAN\" || (winningInputStage !== undefined && winningInputStage.stage !== \"IXSCAN\")) {\n                        index_use += colorize( \"none\", { color: \"red\", bright: true });\n                    } else {\n                        var fullScan = false;\n                        for (index in winningInputStage.keyPattern) {\n                            if (winningInputStage.indexBounds[index][0] == \"[MinKey, MaxKey]\") {\n                                fullScan = true;\n                            }\n                        }\n\n                        if (fullScan) {\n                            index_use += colorize( winningInputStage.indexName + \" (full scan)\", { color: \"yellow\", bright: true });\n                        } else {\n                            index_use += colorize( winningInputStage.indexName, { color: \"green\", bright: true });\n                        }\n                    }\n                    index_use += \"]\";\n                    output.push(index_use);\n                }\n            }\n        }\n\n        if ( this.hasNext() ) {\n            ___it___  = this;\n            output.push(\"More[\" + colorize(\"true\", { color: \"green\", bright: true }) + \"]\");\n        }\n        print(output.join(\" -- \"));\n    }\n    catch ( e ){\n        print( e );\n    }\n};\n\nfunction isInArray(array, value) {\n    return array.indexOf(value) > -1;\n}\n\ntojsonObject = function( x, indent, nolint, nocolor, sort_keys ) {\n    var lineEnding = nolint ? \" \" : \"\\n\";\n    var tabSpace = nolint ? \"\" : __indent;\n    var sortKeys = (null == sort_keys) ? mongo_hacker_config.sort_keys : sort_keys;\n\n    assert.eq( ( typeof x ) , \"object\" , \"tojsonObject needs object, not [\" + ( typeof x ) + \"]\" );\n\n    if (!indent)\n        indent = \"\";\n\n    if ( typeof( x.tojson ) == \"function\" && x.tojson != tojson ) {\n        return x.tojson( indent, nolint, nocolor );\n    }\n\n    if ( x.constructor && typeof( x.constructor.tojson ) == \"function\" && x.constructor.tojson != tojson ) {\n        return x.constructor.tojson( x, indent , nolint, nocolor );\n    }\n\n    if ( x.toString() == \"[object MaxKey]\" )\n        return \"{ $maxKey : 1 }\";\n    if ( x.toString() == \"[object MinKey]\" )\n        return \"{ $minKey : 1 }\";\n\n    var s = \"{\" + lineEnding;\n\n    // push one level of indent\n    indent += tabSpace;\n\n    var total = 0;\n    for ( var k in x ) total++;\n    if ( total === 0 ) {\n        s += indent + lineEnding;\n    }\n\n    var keys = x;\n    if ( typeof( x._simpleKeys ) == \"function\" )\n        keys = x._simpleKeys();\n    var num = 1;\n\n    var keylist=[];\n\n    for(var key in keys)\n        keylist.push(key);\n\n    if ( sortKeys ) {\n        // Disable sorting if this object looks like an index spec\n        if ( (isInArray(keylist, \"v\") && isInArray(keylist, \"key\") && isInArray(keylist, \"name\") && isInArray(keylist, \"ns\")) ) {\n            sortKeys = false;\n        } else {\n            keylist.sort();\n        }\n    }\n\n    for ( var i=0; i<keylist.length; i++) {\n        var key=keylist[i];\n\n        var val = x[key];\n        if ( val == DB.prototype || val == DBCollection.prototype )\n            continue;\n\n        var color = mongo_hacker_config.colors.key;\n        s += indent + colorize(\"\\\"\" + key + \"\\\"\", color, nocolor) + \": \" + tojson( val, indent , nolint, nocolor, sortKeys );\n        if (num != total) {\n            s += \",\";\n            num++;\n        }\n        s += lineEnding;\n    }\n\n    // pop one level of indent\n    indent = indent.substring(__indent.length);\n    return s + indent + \"}\";\n};\n\ntojson = function( x, indent , nolint, nocolor, sort_keys ) {\n\n    var sortKeys = (null == sort_keys) ? mongo_hacker_config.sort_keys : sort_keys;\n\n    if ( x === null )\n        return colorize(\"null\", mongo_hacker_config.colors['null'], nocolor);\n\n    if ( x === undefined )\n        return colorize(\"undefined\", mongo_hacker_config.colors['undefined'], nocolor);\n\n    if ( x.isObjectId ) {\n        var color = mongo_hacker_config.colors['objectid'];\n        return surround('ObjectId', colorize('\"' + x.str + '\"', color, nocolor));\n    }\n\n    if (!indent)\n        indent = \"\";\n\n    var s;\n    switch ( typeof x ) {\n    case \"string\": {\n        s = \"\\\"\";\n        for ( var i=0; i<x.length; i++ ){\n            switch (x[i]){\n                case '\"': s += '\\\\\"'; break;\n                case '\\\\': s += '\\\\\\\\'; break;\n                case '\\b': s += '\\\\b'; break;\n                case '\\f': s += '\\\\f'; break;\n                case '\\n': s += '\\\\n'; break;\n                case '\\r': s += '\\\\r'; break;\n                case '\\t': s += '\\\\t'; break;\n\n                default: {\n                    var code = x.charCodeAt(i);\n                    if (code < 0x20){\n                        s += (code < 0x10 ? '\\\\u000' : '\\\\u00') + code.toString(16);\n                    } else {\n                        s += x[i];\n                    }\n                }\n            }\n        }\n        s += \"\\\"\";\n        return colorize(s, mongo_hacker_config.colors.string, nocolor);\n    }\n    case \"number\":\n        return colorize(x, mongo_hacker_config.colors.number, nocolor);\n    case \"boolean\":\n        return colorize(\"\" + x, mongo_hacker_config.colors['boolean'], nocolor);\n    case \"object\": {\n        s = tojsonObject( x, indent , nolint, nocolor, sortKeys );\n        if ( ( nolint === null || nolint === true ) && s.length < 80 && ( indent === null || indent.length === 0 ) ){\n            s = s.replace( /[\\s\\r\\n ]+/gm , \" \" );\n        }\n        return s;\n    }\n    case \"function\":\n        return colorize(x.toString(), mongo_hacker_config.colors['function'], nocolor);\n    default:\n        throw \"tojson can't handle type \" + ( typeof x );\n    }\n\n};\n\n\nDBQuery.prototype._validate = function( o ){\n    var firstKey = null;\n    for (var k in o) { firstKey = k; break; }\n\n    if (firstKey !== null && firstKey[0] == '$') {\n        // for mods we only validate partially, for example keys may have dots\n        this._validateObject( o );\n    } else {\n        // we're basically inserting a brand new object, do full validation\n        this._validateForStorage( o );\n    }\n};\n\nDBQuery.prototype._validateObject = function( o ){\n    if (typeof(o) != \"object\")\n        throw \"attempted to save a \" + typeof(o) + \" value.  document expected.\";\n\n    if ( o._ensureSpecial && o._checkModify )\n        throw \"can't save a DBQuery object\";\n};\n\nDBQuery.prototype._validateForStorage = function( o ){\n    this._validateObject( o );\n    for ( var k in o ){\n        if ( k.indexOf( \".\" ) >= 0 ) {\n            throw \"can't have . in field names [\" + k + \"]\" ;\n        }\n\n        if ( k.indexOf( \"$\" ) === 0 && ! DBCollection._allowedFields[k] ) {\n            throw \"field names cannot start with $ [\" + k + \"]\";\n        }\n\n        if ( o[k] !== null && typeof( o[k] ) === \"object\" ) {\n            this._validateForStorage( o[k] );\n        }\n    }\n};\n\nDBQuery.prototype._checkMulti = function(){\n  if(this._limit > 0 || this._skip > 0){\n    var ids = this.clone().select({_id: 1}).map(function(o){return o._id;});\n    this._query['_id'] = {'$in': ids};\n    return true;\n  } else {\n    return false;\n  }\n};\n\nDBQuery.prototype.ugly = function(){\n    this._prettyShell = false;\n    return this;\n}\n\nDB.prototype.shutdownServer = function(opts) {\n    if( \"admin\" != this._name ){\n        return \"shutdown command only works with the admin database; try 'use admin'\";\n    }\n\n    cmd = {\"shutdown\" : 1};\n    opts = opts || {};\n    for (var o in opts) {\n        cmd[o] = opts[o];\n    }\n\n    try {\n        var res = this.runCommand(cmd);\n        if( res )\n            throw \"shutdownServer failed: \" + res.errmsg;\n        throw \"shutdownServer failed\";\n    }\n    catch ( e ){\n        assert( e.message.indexOf( \"error doing query: failed\" ) >= 0 , \"unexpected error: \" + tojson( e ) );\n        print( \"server should be down...\" );\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/count.js":"// helper function to format delta counts\nfunction delta(currentCount, previousCount) {\n    var delta = Number(currentCount - previousCount);\n    var formatted_delta;\n    if (isNaN(delta)) {\n      formatted_delta = colorize(\"(first count)\", { color: 'blue' });\n    } else if (delta == 0) {\n      formatted_delta = colorize(\"(=)\", { color: 'blue' });\n    } else if (delta > 0) {\n      formatted_delta = colorize(\"(+\" + delta.commify() + \")\", { color: 'green' });\n    } else if (delta < 0) {\n      formatted_delta = colorize(\"(\" + delta.commify() + \")\", { color: 'red' });\n    } else {\n      formatted_delta = (delta + \" not supported\");\n    }\n    return formatted_delta;\n}\n\n// global variable (to ensure \"persistence\" of document counts)\nshellHelper.previousDocumentCount = {};\n\n// \"count documents\", a bit akin to \"show collections\"\nshellHelper.count = function (what) {\n    assert(typeof what == \"string\");\n\n    var args = what.split( /\\s+/ );\n    what = args[0]\n    args = args.splice(1)\n\n    if (what == \"collections\" || what == \"tables\") {\n        databaseNames = db.getMongo().getDatabaseNames();\n        collectionCounts = databaseNames.map(function (databaseName) {\n            var count = db.getMongo().getDB(databaseName).getCollectionNames().length;\n            return (count.commify() + \" collection(s)\");\n        });\n        databaseNames = colorizeAll(databaseNames, mongo_hacker_config['colors']['databaseNames']);\n        printPaddedColumns(databaseNames, collectionCounts);\n        return \"\";\n    }\n\n    if (what == \"documents\" || what == \"docs\") {\n        collectionNames = db.getCollectionNames().filter(function (collectionName) {\n            // exclude \"system\" collections from \"count\" operation\n            return !collectionName.startsWith('system.');\n        });\n        documentCounts = collectionNames.map(function (collectionName) {\n            var count = db.getCollection(collectionName).count();\n            return (count.commify() + \" document(s)\");\n        });\n        deltaCounts = collectionNames.map(function (collectionName) {\n            // retrieve the previous document count for this collection\n            var previous = shellHelper.previousDocumentCount[collectionName];\n            // determine the current document count for this collection\n            var current = db.getCollection(collectionName).count();\n            // update the stored document count for this collection\n            shellHelper.previousDocumentCount[collectionName] = current;\n            // format the delta since last count\n            return delta(current, previous);\n        });\n        collectionNames = colorizeAll(collectionNames, mongo_hacker_config['colors']['collectionNames']);\n        if (mongo_hacker_config['count_deltas']) {\n            printPaddedColumns(collectionNames, documentCounts, deltaCounts);\n        } else {\n            printPaddedColumns(collectionNames, documentCounts);\n        }\n\n        return \"\";\n    }\n\n    if (what == \"index\" || what == \"indexes\") {\n        db.indexStats(\"\", 1);\n        return \"\"\n    }\n\n    throw \"don't know how to count [\" + what + \"]\";\n\n}\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/dbref.js":"DBRef.prototype.__toString = DBRef.prototype.toString;\nDBRef.prototype.toString = function () {\n  var org = this.__toString();\n  var config = mongo_hacker_config.dbref;\n  if (!config.extended_info) {\n    return org;\n  }\n  var additional = {};\n  var o = this;\n  for (var p in o) {\n    if (typeof o[p] === 'function') {\n      continue;\n    }\n    if (!config.plain && (p === '$ref' || p === '$id')) {\n      continue;\n    }\n    if (config.db_if_differs && p === '$db' && o[p] === db.getName()) {\n      continue;\n    }\n    additional[p] = o[p];\n  }\n  if (config.plain) {\n    return tojsonObject(additional, undefined, true);\n  }\n  return Object.keys(additional).length\n    ? (org.slice(0, -1) + \", \" + tojsonObject(additional, undefined, true) + \")\")\n    : org;\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/find_and_modify.js":"//----------------------------------------------------------------------------\n// findAndModify Helper\n//----------------------------------------------------------------------------\nDBQuery.prototype._findAndModify = function( options ) {\n    var findAndModify = {\n        'findandmodify': this._collection.getName(),\n        'query': this._query,\n        'new': true,\n        'fields': this._fields,\n        'upsert': this._upsert || false,\n        'sort': this._query.orderby || {},\n    };\n\n    for (var key in options){\n        findAndModify[key] = options[key];\n    };\n\n    var result = this._db.runCommand( findAndModify );\n    if ( ! result.ok ){\n        throw \"findAndModifyFailed failed: \" + tojson( result );\n    };\n    return result.value;\n};\n\n//----------------------------------------------------------------------------\n// findAndModify Terminal Variants\n//----------------------------------------------------------------------------\nDBQuery.prototype.updateAndGet = function( update ) {\n    return this._findAndModify({ 'update': update });\n};\n\nDBQuery.prototype.getAndUpdate = function( update ) {\n    return this._findAndModify({ 'update': update, 'new': false });\n};\n\nDBQuery.prototype.replaceAndGet = function( replacement ) {\n    return this._findAndModify({ 'update': replacement });\n};\n\nDBQuery.prototype.getAndReplace = function( replacement ) {\n    return this._findAndModify({ 'update': replacement, 'new': false });\n};\n\nDBQuery.prototype.getAndRemove = function() {\n    return this._findAndModify({ 'remove': true })\n};","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/helpers.js":"function runMatch(cmd, args, regexp) {\n    clearRawMongoProgramOutput();\n    if (args) {\n        run(cmd, args);\n    } else {\n        run(cmd);\n    }\n    var output = rawMongoProgramOutput();\n    return output.match(regexp);\n};\n\nfunction getEnv(env_var) {\n    var env_regex = new RegExp(' ' + env_var + '=(.*)');\n    return runMatch('env', '', env_regex)[1];\n};\n\nfunction getVersion() {\n    var regexp = /version: (\\d).(\\d).(\\d)/;\n    return runMatch('mongo', '--version', regexp).slice(1, 4);\n};\n\nfunction isMongos() {\n    return db.isMaster().msg == 'isdbgrid';\n};\n\nfunction getSlowms(){\n    if(!isMongos()){\n        return db.getProfilingStatus().slowms;\n    } else {\n        return 100;\n    }\n};\n\nfunction maxLength(listOfNames) {\n    return listOfNames.reduce(function(maxLength, name) {\n        return (name.length > maxLength) ? name.length : maxLength ;\n    }, 0);\n};\n\nfunction printPaddedColumns() {\n    var columnWidths = Array.prototype.map.call(\n      arguments,\n      function(column) {\n        return maxLength(column);\n      }\n    );\n\n    for (i = 0; i < arguments[0].length; i++) {\n        row = \"\";\n        for (j = 0; j < arguments.length; j++) {\n            row += arguments[j][i].toString().pad(columnWidths[j], (j == 0));\n            if (j < (arguments.length - 1)) {\n                separator = ((j == 0) ?\n                    mongo_hacker_config['column_separator'] :\n                    mongo_hacker_config['value_separator']\n                );\n                row += \" \" + separator + \" \";\n            }\n        }\n        print(row);\n    }\n\n    return null;\n};\n\nfunction runOnDbs(regexp, callback) {\n    var originalDb = db.getName();\n    db.getMongo().getDBs().databases.filter(function(db) {\n        return db.name.match(regexp); }\n    ).forEach(function(dbEntry) {\n        db = db.getSiblingDB(dbEntry.name);\n        callback(db);\n    });\n    db = db.getSiblingDB(originalDb);\n}\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/index_paranoia.js":"","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/old_aggregation.js":"// Override group because map/reduce style is deprecated\nDBCollection.prototype.agg_group = function( name, group_field, operation, op_value, filter ) {\n    var ops = [];\n    var group_op = { $group: { _id: '$' + group_field } };\n\n    if (filter !== undefined) {\n        ops.push({ '$match': filter });\n    }\n\n    group_op['$group'][name] = { };\n    group_op['$group'][name]['$' + operation] = op_value;\n    ops.push(group_op);\n\n    return this.aggregate(ops);\n};\n\n// Function that groups and counts by group after applying filter\nDBCollection.prototype.gcount = function( group_field, filter ) {\n    return this.agg_group('count', group_field, 'sum', 1, filter);\n};\n\n// Function that groups and sums sum_field after applying filter\nDBCollection.prototype.gsum = function( group_field, sum_field, filter ) {\n    return this.agg_group('sum', group_field, 'sum', '$' + sum_field, filter);\n};\n\n// Function that groups and averages avg_feld after applying filter\nDBCollection.prototype.gavg = function( group_field, avg_field, filter ) {\n    return this.agg_group('avg', group_field, 'avg', '$' + avg_field, filter);\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/prompt.js":"// Improve the default prompt with hostname, process type, and version\nprompt = function() {\n    var serverstatus = db.serverStatus();\n    var host = serverstatus.host.split('.')[0];\n    var process = serverstatus.process;\n    var version = db.serverBuildInfo().version;\n    var repl_set = db._adminCommand({\"replSetGetStatus\": 1}).ok !== 0;\n    var rs_state = '';\n    if(repl_set) {\n        var status = rs.status();\n        var members = status.members;\n        var rs_name = status.set;\n        for(var i = 0; i<members.length; i++){\n            if(members[i].self === true){\n                rs_state = '[' + members[i].stateStr + ':' + rs_name + ']';\n            }\n        };\n    }\n    var state = isMongos() ? '[mongos]' : rs_state;\n    return host + '(' + process + '-' + version + ')' + state + ' ' + db + '> ';\n};\n\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/ps.js":"// Begin PS Hack\n// Copyright (c) 2016 Andrew Young\n// SPDX-License-Identifier: MIT\n\nfunction printTableRow(row, columnWidths) {\n    var pad = function(x, i) {\n        return x.pad(i).slice(-i).toString();\n    };\n    var line = \"\";\n    for(c in columnWidths) {\n        line = line + pad(row[c], columnWidths[c]) + \" \";\n    }\n    print(line);\n}\n\nfunction printTable(headers, rows) {\n    // printTable(headers: Array[String], rows: Array[Array[String]])\n\n    // Find column widths\n    \n    var columnWidths = [];\n\n    for(c in headers) {\n        columnWidths[c] = headers[c].length;\n    }\n\n    for(r in rows) {\n        var row = rows[r];\n        for (c in headers) {\n            row[c] = row[c].toString();\n            columnWidths[c] = Math.max(columnWidths[c], row[c].length);\n        }\n    }\n\n    // Print Table\n    var hr = function(l) {\n        return new Array(l + 1).join(\"-\");\n    };\n    var hrs = [];\n    for(c in columnWidths) {\n        hrs.push(hr(columnWidths[c]));\n    }\n    printTableRow(headers, columnWidths);\n    printTableRow(hrs, columnWidths);\n    rows.forEach(function(row) { printTableRow(row, columnWidths); });\n    \n}\n\nfunction getConnections() {\n    return db.currentOp(true).inprog.filter(function(x) { return x.connectionId; } );\n}\n\nshellHelper.ps = function() {\n    var headers = [\n        \"Connection\",\n        \"ID\",\n        \"Client\",\n        \"S\",\n        \"Active\",\n        \"Time\",\n        \"WaitLock\",\n        \"Operation\",\n        \"Plan\",\n        \"Namespace\"\n    ];\n\n\n    var rows = [];\n    \n    var connections = getConnections();\n\n    connections.forEach(function(op) {\n        var connectionId = op.connectionId;\n        var opId = op.opid || \"\";\n        var client = op.client || op.client_s || \"\";\n        var isMongos = op.client_s ? \"S\" : \"\";\n        var active = op.active ? \"Active\" : \"Idle\";\n        var time = op.secs_running || \"\";\n        var waitingForLock = op.waitingForLock ? \"Yes\" : \"No\";\n        var opName = op.op || \"\";\n        var plan = op.planSummary || \"\";\n        var ns = op.ns || \"\";\n        \n        rows.push([\n            connectionId,\n            opId,\n            client,\n            isMongos,\n            active,\n            time,\n            waitingForLock,\n            opName,\n            plan,\n            ns\n        ]);\n    });\n\n    printTable(headers, rows);\n    \n};\n\nshellHelper.kill = function(opId) {\n    return db.killOp(opId);\n}\n\n// End PS Hack\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/randomise.js":"//----------------------------------------------------------------------------\n// Randomise API\n//----------------------------------------------------------------------------\n\nfunction randomWord(length, words, seed){\n    /* Return a random word(s).\n        length: length of each word (default is 5 letters).\n        words: number of words (default is 1 word).\n        seed: a word to be planted randomly amongst the word(s), good for search. (optional)\n    */\n    words = typeof words !== 'undefined' ? words : 1;\n    length = typeof length !== 'undefined' ? length : 5;\n    var seedOn = typeof seed !== 'undefined';\n    var text = \"\";\n    var possible =\"abcdefghijklmnopqrstuvwxyz\";\n    var firstword = true;\n    for (var j=0; j < words; j++){\n        var word = \"\";\n        for (var i=0; i < length; i++){\n            word += possible.charAt(Random.randInt(possible.length));\n        }\n        /* Plant a seeded word */\n        if (seedOn == true){\n            var randomBool = Random.rand() >= 0.8;\n            if (randomBool == true){\n                if (firstword == true){ text = seed; firstword = false;}\n                else {text += \" \" + seed;}\n                seedOn = false;\n            }\n        }\n        if (firstword == true){ text = word; firstword = false;}\n        else {text += \" \" + word;}\n    }\n    return text;\n};\n\nfunction randomNumber(max){\n    /* Return a random number\n        max: highest random number (default is 100).\n    */\n    max = typeof max !== 'undefined' ? max : 100;\n    return Random.randInt(max);\n};\n\nfunction randomDate(start, end){\n    /* Return a random date between start and end values. \n       start: Date(), default 2 years ago. \n       end: Date(), default today.\n    */\n    end = typeof end !== 'undefined' ? end : new Date();\n    if (typeof start === 'undefined') { \n        start = new Date(end.getTime());\n        start.setYear(start.getFullYear() - 2);\n    }\n    return new Date(start.getTime() + Random.randInt(end.getTime() - start.getTime()));\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/show.js":"// Better show dbs\nshellHelper.show = function (what) {\n    assert(typeof what == \"string\");\n\n    var args = what.split( /\\s+/ );\n    what = args[0]\n    args = args.splice(1)\n\n    if (what == \"profile\") {\n        if (db.system.profile.count() == 0) {\n            print(\"db.system.profile is empty\");\n            print(\"Use db.setProfilingLevel(2) will enable profiling\");\n            print(\"Use db.system.profile.find() to show raw profile entries\");\n        }\n        else {\n            print();\n            db.system.profile.find({ millis: { $gt: 0} }).sort({ $natural: -1 }).limit(5).forEach(\n                function (x) {\n                    print(\"\" + x.op + \"\\t\" + x.ns + \" \" + x.millis + \"ms \" + String(x.ts).substring(0, 24));\n                    var l = \"\";\n                    for ( var z in x ){\n                        if ( z == \"op\" || z == \"ns\" || z == \"millis\" || z == \"ts\" )\n                            continue;\n\n                        var val = x[z];\n                        var mytype = typeof(val);\n\n                        if ( mytype == \"string\" ||\n                             mytype == \"number\" )\n                            l += z + \":\" + val + \" \";\n                        else if ( mytype == \"object\" )\n                            l += z + \":\" + tojson(val ) + \" \";\n                        else if ( mytype == \"boolean\" )\n                            l += z + \" \";\n                        else\n                            l += z + \":\" + val + \" \";\n\n                    }\n                    print( l );\n                    print(\"\\n\");\n                }\n            )\n        }\n        return \"\";\n    }\n\n    if (what == \"users\") {\n        db.getUsers().forEach(printjson);\n        return \"\";\n    }\n\n    if (what == \"roles\") {\n        db.getRoles({showBuiltinRoles: true}).forEach(printjson);\n        return \"\";\n    }\n\n    if (what == \"collections\" || what == \"tables\") {\n        var collectionNames = db.getCollectionNames();\n        var collectionSizes = collectionNames.map(function (name) {\n            var stats = db.getCollection(name).stats();\n            var size = (stats.size / 1024 / 1024).toFixed(3);\n            return (size + \"MB\");\n        });\n        var collectionStorageSizes = collectionNames.map(function (name) {\n            var stats = db.getCollection(name).stats();\n            var storageSize = (stats.storageSize / 1024 / 1024).toFixed(3);\n            return (storageSize + \"MB\");\n        });\n        collectionNames = colorizeAll(collectionNames, mongo_hacker_config['colors']['collectionNames']);\n        printPaddedColumns(collectionNames, collectionSizes, collectionStorageSizes);\n        return \"\";\n    }\n\n    if (what == \"dbs\" || what == \"databases\") {\n        var databases = db.getMongo().getDBs().databases.sort(function(a, b) { return a.name.localeCompare(b.name) });\n        var databaseNames = databases.map(function(db) {\n            return db.name;\n        });\n        var databaseSizes = databases.map(function(db) {\n            var sizeInGigaBytes = (db.sizeOnDisk / 1024 / 1024 / 1024).toFixed(3);\n            return (db.sizeOnDisk > 1) ? (sizeInGigaBytes + \"GB\") : \"(empty)\";\n        });\n        databaseNames = colorizeAll(databaseNames, mongo_hacker_config['colors']['databaseNames']);\n        printPaddedColumns(databaseNames, databaseSizes);\n        return \"\";\n    }\n\n    if (what == \"log\" ) {\n        var n = \"global\";\n        if ( args.length > 0 )\n            n = args[0]\n\n        var res = db.adminCommand( { getLog : n } );\n        if ( ! res.ok ) {\n            print(\"Error while trying to show \" + n + \" log: \" + res.errmsg);\n            return \"\";\n        }\n        for ( var i=0; i<res.log.length; i++){\n            print( res.log[i] )\n        }\n        return \"\"\n    }\n\n    if (what == \"logs\" ) {\n        var res = db.adminCommand( { getLog : \"*\" } )\n        if ( ! res.ok ) {\n            print(\"Error while trying to show logs: \" + res.errmsg);\n            return \"\";\n        }\n        for ( var i=0; i<res.names.length; i++){\n            print( res.names[i] )\n        }\n        return \"\"\n    }\n\n    if (what == \"startupWarnings\" ) {\n        var dbDeclared, ex;\n        try {\n            // !!db essentially casts db to a boolean\n            // Will throw a reference exception if db hasn't been declared.\n            dbDeclared = !!db;\n        } catch (ex) {\n            dbDeclared = false;\n        }\n        if (dbDeclared) {\n            var res = db.adminCommand( { getLog : \"startupWarnings\" } );\n            if ( res.ok ) {\n                if (res.log.length == 0) {\n                    return \"\";\n                }\n                print( \"Server has startup warnings: \" );\n                for ( var i=0; i<res.log.length; i++){\n                    print( res.log[i] )\n                }\n                return \"\";\n            } else if (res.errmsg == \"no such cmd: getLog\" ) {\n                // Don't print if the command is not available\n                return \"\";\n            } else if (res.code == 13 /*unauthorized*/ ||\n                       res.errmsg == \"unauthorized\" ||\n                       res.errmsg == \"need to login\") {\n                // Don't print if startupWarnings command failed due to auth\n                return \"\";\n            } else {\n                print(\"Error while trying to show server startup warnings: \" + res.errmsg);\n                return \"\";\n            }\n        } else {\n            print(\"Cannot show startupWarnings, \\\"db\\\" is not set\");\n            return \"\";\n        }\n    }\n\n    throw \"don't know how to show [\" + what + \"]\";\n\n}\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/sh_status.js":"sh.getRecentMigrations = function () {\n    var configDB = db.getSiblingDB(\"config\");\n    var yesterday = new Date( new Date() - 24 * 60 * 60 * 1000 );\n    var result = [];\n    result = result.concat(configDB.changelog.aggregate( [\n        { $match : { time : { $gt : yesterday }, what : \"moveChunk.from\", \"details.errmsg\" : {\n            \"$exists\" : false } } },\n        { $group : { _id: { msg: \"$details.errmsg\" }, count : { \"$sum\":1 } } },\n        { $project : { _id : { $ifNull: [ \"$_id.msg\", \"Success\" ] }, count : \"$count\" } }\n    ] ).result);\n    result = result.concat(configDB.changelog.aggregate( [\n        { $match : { time : { $gt : yesterday }, what : \"moveChunk.from\", \"details.errmsg\" : {\n            \"$exists\" : true } } },\n        { $group : { _id: { msg: \"$details.errmsg\", from : \"$details.from\", to: \"$details.to\" },\n            count : { \"$sum\":1 } } },\n        { $project : { _id : \"$_id.msg\" , from : \"$_id.from\", to : \"$_id.to\" , count : \"$count\" } }\n    ] ).result);\n    return result;\n};\n\nprintShardingStatus = function( configDB , verbose ){\n    if (configDB === undefined)\n        configDB = db.getSisterDB('config')\n\n    var version = configDB.getCollection( \"version\" ).findOne();\n    if ( version == null ){\n        print( \"printShardingStatus: this db does not have sharding enabled. be sure you are\",\n                \"connecting to a mongos from the shell and not to a mongod.\" );\n        return;\n    }\n\n    var raw = \"\";\n    var output = function(s){\n        raw += s + \"\\n\";\n    }\n    output( \"--- Sharding Status --- \" );\n    output( \"  sharding version: \" + tojson( configDB.getCollection( \"version\" ).findOne(), \"  \" ) );\n\n    output( \"  shards:\" );\n    configDB.shards.find().sort( { _id : 1 } ).forEach(\n        function(z){\n            output( \"    \" + tojsononeline( z ) );\n        }\n    );\n\n    // All of the balancer information functions below depend on a connection to a liveDB\n    // This isn't normally a problem, but can cause issues in testing and running with --nodb\n    if ( typeof db !== \"undefined\" ) {\n        output( \"  balancer:\" );\n\n        //Is the balancer currently enabled\n        output( \"\\tCurrently enabled:  \" + ( sh.getBalancerState() ?\n            colorize(\"yes\", {color: \"cyan\"}) :\n            colorize(\"no\",  {color: \"red\"}) ) );\n\n        //Is the balancer currently active\n        output( \"\\tCurrently running:  \" +\n            colorize(( sh.isBalancerRunning() ? \"yes\" : \"no\" ), {color: \"gray\"}) );\n\n        //Output details of the current balancer round\n        var balLock = sh.getBalancerLockDetails();\n        if ( balLock ) {\n            output( \"\\t\\tBalancer lock taken at \" +\n                colorize(balLock.when, {color: \"gray\"}) + \" by \" +\n                colorize(balLock.who,  {color: \"cyan\"}) );\n        }\n\n        //Output the balancer window\n        var balSettings = sh.getBalancerWindow();\n        if ( balSettings ) {\n            output( \"\\t\\tBalancer active window is set between \" +\n                colorize(balSettings.start, {color: \"gray\"}) + \" and \" +\n                colorize(balSettings.stop,  {color: \"gray\"}) + \" server local time\");\n        }\n\n        //Output the list of active migrations\n        var activeMigrations = sh.getActiveMigrations();\n        if (activeMigrations.length > 0 ){\n            output(\"\\tCollections with active migrations: \");\n            activeMigrations.forEach( function(migration){\n                output(\"\\t\\t\" + \n                    colorize(migration._id,  {color: \"cyan\"})+ \" started at \" + \n                    colorize(migration.when, {color: \"gray\"}) );\n            });\n        }\n\n        // Actionlog and version checking only works on 2.7 and greater\n        var versionHasActionlog = false;\n        var metaDataVersion = configDB.getCollection(\"version\").findOne().currentVersion;\n        if ( metaDataVersion > 5 ) {\n            versionHasActionlog = true;\n        }\n        if ( metaDataVersion == 5 ) {\n            var verArray = db.serverBuildInfo().versionArray;\n            if (verArray[0] == 2 && verArray[1] > 6){\n                versionHasActionlog = true;\n            }\n        }\n\n        if ( versionHasActionlog ) {\n            //Review config.actionlog for errors\n            var actionReport = sh.getRecentFailedRounds();\n            //Always print the number of failed rounds\n            output( \"\\tFailed balancer rounds in last 5 attempts:  \" + \n                colorize(actionReport.count, {color: \"red\"}) );\n\n            //Only print the errors if there are any\n            if ( actionReport.count > 0 ){\n                output( \"\\tLast reported error:  \"    + actionReport.lastErr );\n                output( \"\\tTime of Reported error:  \" + actionReport.lastTime );\n            }\n\n            output(\"\\tMigration Results for the last 24 hours: \");\n            var migrations = sh.getRecentMigrations();\n            if(migrations.length > 0) {\n                migrations.forEach( function(x) {\n                    if (x._id === \"Success\"){\n                        output( \"\\t\\t\" + colorize(x.count, {color: \"gray\"}) + \n                            \" : \"+ colorize(x._id, {color: \"cyan\"}));\n                    } else {\n                        output( \"\\t\\t\" + colorize(x.count, {color: \"gray\"}) + \n                            \" : Failed with error '\" + colorize(x._id, {color: \"red\"}) +\n                        \"', from \" + x.from + \" to \" + x.to );\n                    }\n                });\n            } else {\n                    output( \"\\t\\tNo recent migrations\");\n            }\n        }\n    }\n\n    output( \"  databases:\" );\n    configDB.databases.find().sort( { name : 1 } ).forEach(\n        function(db){\n            output( \"    \" + tojsononeline(db,\"\",true) );\n\n            if (db.partitioned){\n                configDB.collections.find( { _id : new RegExp( \"^\" +\n                    RegExp.escape(db._id) + \"\\\\.\" ) } ).\n                    sort( { _id : 1 } ).forEach( function( coll ){\n                        if ( coll.dropped == false ){\n                            output( \"    \" + coll._id );\n                            output( \"      shard key: \" + tojson(coll.key, 0, true) );\n                            output( \"      chunks:\" );\n\n                            res = configDB.chunks.aggregate(\n                                { \"$match\": { ns: coll._id } },\n                                { \"$group\": { _id: \"$shard\", nChunks: { \"$sum\": 1 } } },\n                                { \"$project\" : { _id : 0 , shard : \"$_id\" , nChunks : \"$nChunks\" } },\n                                { \"$sort\" : { shard : 1 } }\n                            ).result\n\n                            var totalChunks = 0;\n                            res.forEach( function(z){\n                                totalChunks += z.nChunks;\n                                output( \"        \" + z.shard + \": \" + z.nChunks );\n                            } )\n\n                            if ( totalChunks < 20 || verbose ){\n                                configDB.chunks.find( { \"ns\" : coll._id } ).sort( { min : 1 } ).forEach(\n                                    function(chunk){\n                                        output( \"        \" +\n                                            tojson( chunk.min, 0, true) + \" -> \" +\n                                            tojson( chunk.max, 0, true ) +\n                                            \" on: \" + colorize(chunk.shard, {color: 'cyan'}) + \" \" + tojson( chunk.lastmod ) + \" \" +\n                                            ( chunk.jumbo ? \"jumbo \" : \"\" )\n                                        );\n                                    }\n                                );\n                            }\n                            else {\n                                output( \"\\t\\t\\ttoo many chunks to print, use verbose if you want to force print\" );\n                            }\n\n                            configDB.tags.find( { ns : coll._id } ).sort( { min : 1 } ).forEach(\n                                function( tag ) {\n                                    output( \"        tag: \" + tag.tag + \"  \" + tojson( tag.min ) + \" -> \" + tojson( tag.max ) );\n                                }\n                            )\n                        }\n                    }\n                )\n            }\n        }\n    );\n\n    print( raw );\n}\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/uuid.js":"function base64ToHex(base64) {\n    var base64Digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var hexDigits = \"0123456789abcdef\";\n    var hex = \"\";\n    for (var i = 0; i < 24; ) {\n        var e1 = base64Digits.indexOf(base64[i++]);\n        var e2 = base64Digits.indexOf(base64[i++]);\n        var e3 = base64Digits.indexOf(base64[i++]);\n        var e4 = base64Digits.indexOf(base64[i++]);\n        var c1 = (e1 << 2) | (e2 >> 4);\n        var c2 = ((e2 & 15) << 4) | (e3 >> 2);\n        var c3 = ((e3 & 3) << 6) | e4;\n        hex += hexDigits[c1 >> 4];\n        hex += hexDigits[c1 & 15];\n        if (e3 != 64) {\n            hex += hexDigits[c2 >> 4];\n            hex += hexDigits[c2 & 15];\n        }\n        if (e4 != 64) {\n            hex += hexDigits[c3 >> 4];\n            hex += hexDigits[c3 & 15];\n        }\n    }\n    return hex;\n}\n\nfunction hexToBase64(hex) {\n    var base64Digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var base64 = \"\";\n    var group;\n    for (var i = 0; i < 30; i += 6) {\n        group = parseInt(hex.substr(i, 6), 16);\n        base64 += base64Digits[(group >> 18) & 0x3f];\n        base64 += base64Digits[(group >> 12) & 0x3f];\n        base64 += base64Digits[(group >> 6) & 0x3f];\n        base64 += base64Digits[group & 0x3f];\n    }\n    group = parseInt(hex.substr(30, 2), 16);\n    base64 += base64Digits[(group >> 2) & 0x3f];\n    base64 += base64Digits[(group << 4) & 0x3f];\n    base64 += \"==\";\n    return base64;\n}\n\nvar platformSpecificUuidModifications = {\n    \"java\": function (hex) {\n        var msb = hex.substr(0, 16);\n        var lsb = hex.substr(16, 16);\n        msb = msb.substr(14, 2) + msb.substr(12, 2) + msb.substr(10, 2) + msb.substr(8, 2)\n            + msb.substr(6, 2) + msb.substr(4, 2) + msb.substr(2, 2) + msb.substr(0, 2);\n        lsb = lsb.substr(14, 2) + lsb.substr(12, 2) + lsb.substr(10, 2) + lsb.substr(8, 2)\n            + lsb.substr(6, 2) + lsb.substr(4, 2) + lsb.substr(2, 2) + lsb.substr(0, 2);\n        return msb + lsb;\n    },\n    \"c#\": function (hex) {\n        return hex.substr(6, 2) + hex.substr(4, 2) + hex.substr(2, 2) + hex.substr(0, 2)\n            + hex.substr(10, 2) + hex.substr(8, 2) + hex.substr(14, 2) + hex.substr(12, 2)\n            + hex.substr(16, 16);\n    },\n    \"python\": function (hex) {\n        return hex;\n    },\n    \"default\": function (hex) {\n        return hex;\n    }\n};\n\nfunction UUID(uuid, type) {\n    var hex = uuid.replace(/[{}-]/g, \"\");\n    var typeNum = 4;\n    if (type != undefined) {\n        typeNum = 3;\n        hex = platformSpecificUuidModifications[type](hex);\n    }\n    return new BinData(typeNum, hexToBase64(hex));\n}\n\nfunction uuidToString(uuid, uuidType) {\n    var uuidType = uuidType || mongo_hacker_config['uuid_type'];\n    var hex = platformSpecificUuidModifications[uuidType](base64ToHex(uuid.base64()));\n    return hex.substr(0, 8) + '-' + hex.substr(8, 4) + '-' + hex.substr(12, 4)\n        + '-' + hex.substr(16, 4) + '-' + hex.substr(20, 12);\n}\n","/home/travis/build/npmtest/node-npmtest-mongo-hacker/node_modules/mongo-hacker/hacks/verbose.js":"setVerboseShell(true);\n\nDBQuery.prototype._prettyShell = true\n\nDB.prototype._getExtraInfo = function(action) {\n    if ( typeof _verboseShell === 'undefined' || !_verboseShell ) {\n        __callLastError = true;\n        return;\n    }\n\n    // explicit w:1 so that replset getLastErrorDefaults aren't used here which would be bad.\n    var startTime = new Date().getTime();\n    var res = this.getLastErrorCmd(1);\n    if (res) {\n        if (res.err !== undefined && res.err !== null) {\n            // error occurred, display it\n            print(res.err);\n            return;\n        }\n\n        var info = action + \" \";\n        // hack for inserted because res.n is 0\n        info += action != \"Inserted\" ? res.n : 1;\n        if (res.n > 0 && res.updatedExisting !== undefined) info += \" \" + (res.updatedExisting ? \"existing\" : \"new\");\n        info += \" record(s) in \";\n        var time = new Date().getTime() - startTime;\n        var slowms = getSlowms();\n        if (time > slowms) {\n            info += colorize(time + \"ms\", { color: 'red', bright: true });\n        } else {\n            info += colorize(time + \"ms\", { color: 'green', bright: true });\n        }\n        print(info);\n    }\n};\n"}